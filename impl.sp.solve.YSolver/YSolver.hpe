<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="002400000480000094000000060200000024000052534131000400001100000095c94f1865342526b29221555f336d3917001c5f09b4efb35f0d84c9e35d0ebedbcd05c840960ed4e301684b0e8a7a79a4e6588945354d65c6e1d75466da11575829a108949ab951de0e1bb648362bac431ed80d28d65b621e0ea911dd0fbf92a96931d066256bf8e198328a70bb1e797d6407edadd4a6c296eeb6d8428cfd8d" isAbstract="false" kind="Computation" name="YSolver" packagePath="impl.sp.solve">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000ad5b5406433e1136d6257f7a94ec912947e8054f47d9feb326127d5cd4ad0302676ddb90068786128bf20e92671a1e77c88155d513116eef1675dbbaa145876cc626135211ec3e708f984dad645a0205e8c2a75dc51c667d11b1c13b5440ec9f13e57b6f7288107eddf1be427261d931d6b5b6e0c7d6c054ad53b2b7e9de3581" localRef="base" location="sp.solve.Solver/Solver.hpe" name="Solver" package="sp.solve" version="1.0.0.0">
        <visualDescription h="30" w="50" x="313" y="252">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="axis" varName="DIR"/>
        <parameter formFieldId="instance_type" varName="I"/>
        <parameter formFieldId="class" varName="C"/>
        <parameter formFieldId="method" varName="MTH"/>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000cfe94b8926d4a7de4f70d204303375a68658c9c988f5e0ec7f1f3dce28b75501399411f8002d0637e06b03a2849ef779a22e26ae137759213f595fd13ccb5101bb6f07e7560df0d8b1beadc8dacecefd49c7844d298e78991b98dd4650ec7bf0b26716727a7bc437f39a5ccede87c7db6829de68c511abb9d0b4e3644bcf66ad" localRef="cells_info" location="common.datapartition.MultiPartitionCells/MultiPartitionCells.hpe" multiple="true" name="MultiPartitionCells" package="common.datapartition" exposed="true">
          <visualDescription h="53" w="112" x="428" y="338">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="cells">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="002400000480000094000000060200000024000052534131000400001100000009b97ce4f3981d78e251ff90894751a2f19e3d7fcafeadee8da1cb93890a7d9ed59b4773f575afc0782c61b877ac17cea1ab4429bfd162c1bdff0b6c7fe9d07f8e9ccdcd219b58671c77cf6cfbada633e18309cb4c2e518fedeaa6aecf435a12dc4a18c8384c15d61dfab5a2056f58c2bcf936823b8d84a8c5cc5e25827a1598" localRef="problem_data" location="adi.data.ProblemDefinition/ProblemDefinition.hpe" multiple="false" name="ProblemDefinition" package="adi.data" exposed="true">
          <visualDescription h="45" w="106" x="427" y="209">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="instance_type" varName="I"/>
          <parameter formFieldId="class" varName="C"/>
          <unitBounds uRef="problem">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009b5fdf9e2fd2e1d4c40d5d105e19369c7729126e13c1d35d7124531d9c4fa1a01ecb25564a9fc1e7175d98659a5280d86a339f77d53abc6eff4debf0c86ea2c480a3ffedb149923bba754c2bb0fb6117e2416acad5d23bebfe734b82b120e8ca3451465ce29e2c470da1b915836a5db31d0e17997a541c0f79ea1aed03990587" localRef="topology" location="common.topology.Ring/Ring.hpe" multiple="false" name="Ring" package="common.topology" exposed="true">
          <visualDescription h="35" w="92" x="356" y="110">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="cell">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000059fdc60f0095a1142aef66ff82b5e8659158d29c9ae6eedd576a96e33ae1faaddaf78b57c8cab897deeb79b165ed011c3cd25deeeed69da38fc30a1143e39fa67ab658c278a82203de07eafa3dafe7704a84c1fffc42035b92d09563efdfe7b59862d01f598f626efa5cd4eef962fb18970112f8a530495c2a482922a19258b" localRef="mpi" location="environment.MPIDirect/MPIDirect.hpe" multiple="false" name="MPIDirect" package="environment" exposed="true">
          <visualDescription h="30" w="50" x="327" y="157">
            <color b="240" g="32" r="160"/>
          </visualDescription>
          <unitBounds uRef="mpi">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <unitBounds uRef="solve">
          <visualDescription h="10" w="10" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000ffcae3e9a0ecbf9c4629fdb52bc2acc0e2cc392d40ed0441b527e752c9079cf609fb0785045e3d2c5ace2f492d755021fd6cf82d853e202471136832c6cf8fdffec701b57bfde7017dd2ef51f1a4c4adca40833d6c6165b9123411a3dc7be80a59839ab3316debcc5e4d0d6e17dcb8400cf7e4bc1eca328e130aa9f8182bfccb" localRef="ydir" location="common.axis.YAxis/YAxis.hpe" multiple="false" name="YAxis" package="common.axis" exposed="false">
      <visualDescription h="30" w="50" x="189" y="184">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="y">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000159d9ccb4ff0bb35a4fe190495e9c0d9a8406fa4adae5405850aed7cf83bbe6096bcb7deb5b07550a718fabec888b38f45c00ad4323db7b35e01dd236f9d1af6d8d0e529844de79031b63f05f2e810d0218c315e2c720d374b2bc2c0b15ec45863f2832e19f30c9bf6ee1519c76cd5e6f0ed485d2027397f93caec006396c587" localRef="method" location="sp.solve.SPMethod/SPMethod.hpe" multiple="false" name="SPMethod" package="sp.solve" exposed="false">
      <visualDescription h="30" w="50" x="114" y="166">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="method">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000237f437b205f7bfa00c2d0b40167897c37f84c96a62c077e2832a5360fa8c1c7438dfa969d99bb36a48a7baefcbd50d84ae2e3e71a349dce24c2b0bc473997871be48fdb29d0d48b0928ca968440c6b6663c6740810dab7b664db0e0cfbfe5b21f223402d0d9bd601294898724b6a1da46e78261ef1ee37ac63ca9b2dbdc0d90" localRef="class" location="common.problem_size.Class/Class.hpe" multiple="false" name="Class" package="common.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="102" y="170">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="class">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000796ff7bbb33560060ee9951c4f8242d987089c0c50af1d3a6ab2f92466788c33bfa42e66a347c4206d81a948be78598f82f386b898f40714662cb0134d02313a7e06d04944957cb9149a5069ebfcc65b58711afd15bfbe6f3144cf719a1d8c90833890d5ed1eac7e3b8a657a774a065ca04588c7743c47a41fe59e21cd7767a4" localRef="instance" location="sp.problem_size.Instance_SP/Instance_SP.hpe" multiple="false" name="Instance_SP" package="sp.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="111" y="389">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="class" varName="C"/>
      <unitBounds uRef="instance">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="class" varName="C"/>
    <supplyParameter cRef="ydir" varName="DIR"/>
    <supplyParameter cRef="method" varName="MTH"/>
    <supplyParameter cRef="instance" varName="I"/>
    <interface iRef="IYSolverImpl" nArgs="4">
      <slice isRef="forward">
        <originRef cRef="forward" iRef="IForward"/>
        <visualDescription h="10" w="10" x="8" y="28"/>
      </slice>
      <slice isRef="shift_backward">
        <originRef cRef="shift_backward" iRef="IShift"/>
        <visualDescription h="10" w="10" x="39" y="5"/>
      </slice>
      <slice isRef="shift_forward">
        <originRef cRef="shift_forward" iRef="IShift"/>
        <visualDescription h="10" w="10" x="67" y="65"/>
      </slice>
      <slice isRef="backward">
        <originRef cRef="backward" iRef="IBackward"/>
        <visualDescription h="10" w="10" x="57" y="5"/>
      </slice>
      <slice isRef="lhs">
        <originRef cRef="lhs" iRef="ILHS"/>
        <visualDescription h="10" w="10" x="32" y="26"/>
      </slice>
      <slice isRef="matvecproduct">
        <originRef cRef="matvecproduct" iRef="IBlockDiagonalMatVecProduct"/>
        <visualDescription h="10" w="10" x="66" y="18"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using common.datapartition.MultiPartitionCells;&#xA;using common.topology.Ring;&#xA;using sp.solve.LHS;&#xA;using sp.problem_size.Instance_SP;&#xA;using common.problem_size.Class;&#xA;using adi.data.ProblemDefinition;&#xA;using sp.solve.BlockDiagonalMatVecProduct;&#xA;using common.Buffer;&#xA;using sp.solve.Forward;&#xA;using sp.solve.SPMethod;&#xA;using common.axis.YAxis;&#xA;using common.interactionpattern.Shift;&#xA;using common.direction.Forward;&#xA;using common.direction.Backward;&#xA;using environment.MPIDirect;&#xA;using common.problem_size.Instance;&#xA;using sp.solve.Backward;&#xA;using sp.solve.Solver;&#xA;&#xA;namespace impl.sp.solve.YSolver { &#xA;&#xA;public abstract class BaseIYSolverImpl&lt;I, C, MTH, DIR>: Computation, BaseISPSolver&lt;I, C, MTH, DIR>&#xA;where I:IInstance_SP&lt;C>&#xA;where C:IClass&#xA;where MTH:ISPMethod&#xA;where DIR:IY&#xA;{&#xA;&#xA;#region data&#xA;&#x9;&#x9;&#xA;protected int[,] start, end, slice, cell_size;&#xA;protected double[,,,,] lhs, rhs;&#xA;protected int ncells;&#xA;&#x9;&#x9;&#xA;override public void initialize()&#xA;{&#x9;&#xA;&#x9;start = Cells.cell_start;&#xA;&#x9;end = Cells.cell_end;&#xA;&#x9;slice = Cells.cell_slice;&#xA;&#x9;cell_size = Cells.cell_size;&#xA;&#x9;&#xA;&#x9;ncells = Problem.NCells;&#xA;&#x9;lhs = Problem.Field_lhs;&#xA;&#x9;rhs = Problem.Field_rhs;&#xA;}&#xA;&#x9;&#x9;&#xA;#endregion&#xA;&#xA;private ICells cells = null;&#xA;&#xA;public ICells Cells {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.cells == null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.cells = (ICells) Services.getPort(&quot;cells_info&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return this.cells;&#xA;&#x9;}&#xA;}&#xA;&#xA;private ICell cell = null;&#xA;&#xA;public ICell Cell {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.cell == null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.cell = (ICell) Services.getPort(&quot;topology&quot;);&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return this.cell;&#xA;&#x9;}&#xA;}&#xA;&#xA;private ILHS&lt;I, C, DIR, MTH> lhs_ = null;&#xA;&#xA;protected ILHS&lt;I, C, DIR, MTH> Lhs {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.lhs_ == null)&#xA;&#x9;&#x9;&#x9;this.lhs_ = (ILHS&lt;I, C, DIR, MTH>) Services.getPort(&quot;lhs&quot;);&#xA;&#x9;&#x9;return this.lhs_;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IProblemDefinition&lt;I, C> problem = null;&#xA;&#xA;public IProblemDefinition&lt;I, C> Problem {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.problem == null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.problem = (IProblemDefinition&lt;I, C>) Services.getPort(&quot;problem_data&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return this.problem;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IBlockDiagonalMatVecProduct&lt;I, C, DIR, MTH> matvecproduct = null;&#xA;&#xA;protected IBlockDiagonalMatVecProduct&lt;I, C, DIR, MTH> Matvecproduct {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.matvecproduct == null)&#xA;&#x9;&#x9;&#x9;this.matvecproduct = (IBlockDiagonalMatVecProduct&lt;I, C, DIR, MTH>) Services.getPort(&quot;matvecproduct&quot;);&#xA;&#x9;&#x9;return this.matvecproduct;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IBuffer output_buffer_forward = null;&#xA;&#xA;protected IBuffer Output_buffer_forward {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.output_buffer_forward == null)&#xA;&#x9;&#x9;&#x9;this.output_buffer_forward = (IBuffer) Services.getPort(&quot;output_buffer_forward&quot;);&#xA;&#x9;&#x9;return this.output_buffer_forward;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IBuffer input_buffer_forward = null;&#xA;&#xA;protected IBuffer Input_buffer_forward {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.input_buffer_forward == null)&#xA;&#x9;&#x9;&#x9;this.input_buffer_forward = (IBuffer) Services.getPort(&quot;input_buffer_forward&quot;);&#xA;&#x9;&#x9;return this.input_buffer_forward;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IBuffer output_buffer_backward = null;&#xA;&#xA;protected IBuffer Output_buffer_backward {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.output_buffer_backward == null)&#xA;&#x9;&#x9;&#x9;this.output_buffer_backward = (IBuffer) Services.getPort(&quot;output_buffer_backward&quot;);&#xA;&#x9;&#x9;return this.output_buffer_backward;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IBuffer input_buffer_backward = null;&#xA;&#xA;protected IBuffer Input_buffer_backward {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.input_buffer_backward == null)&#xA;&#x9;&#x9;&#x9;this.input_buffer_backward = (IBuffer) Services.getPort(&quot;input_buffer_backward&quot;);&#xA;&#x9;&#x9;return this.input_buffer_backward;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IForward&lt;I, C, MTH, DIR> forward = null;&#xA;&#xA;protected IForward&lt;I, C, MTH, DIR> Forward {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.forward == null)&#xA;&#x9;&#x9;&#x9;this.forward = (IForward&lt;I, C, MTH, DIR>) Services.getPort(&quot;forward&quot;);&#xA;&#x9;&#x9;return this.forward;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IShift&lt;IForwardDirection> shift_forward = null;&#xA;&#xA;protected IShift&lt;IForwardDirection> Shift_forward {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.shift_forward == null)&#xA;&#x9;&#x9;&#x9;this.shift_forward = (IShift&lt;IForwardDirection>) Services.getPort(&quot;shift_forward&quot;);&#xA;&#x9;&#x9;return this.shift_forward;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IShift&lt;IBackwardDirection> shift_backward = null;&#xA;&#xA;protected IShift&lt;IBackwardDirection> Shift_backward {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.shift_backward == null)&#xA;&#x9;&#x9;&#x9;this.shift_backward = (IShift&lt;IBackwardDirection>) Services.getPort(&quot;shift_backward&quot;);&#xA;&#x9;&#x9;return this.shift_backward;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IMPIDirect mpi = null;&#xA;&#xA;public IMPIDirect Mpi {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.mpi == null)&#xA;&#x9;&#x9;&#x9;this.mpi = (IMPIDirect) Services.getPort(&quot;mpi&quot;);&#xA;&#x9;&#x9;return this.mpi;&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;private IBackward&lt;I, C, DIR, MTH> backward = null;&#xA;&#xA;protected IBackward&lt;I, C, DIR, MTH> Backward {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.backward == null)&#xA;&#x9;&#x9;&#x9;this.backward = (IBackward&lt;I, C, DIR, MTH>) Services.getPort(&quot;backward&quot;);&#xA;&#x9;&#x9;return this.backward;&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;abstract public int go(); &#xA;&#xA;&#xA;}&#xA;&#xA;}&#xA;" fileType="library" name="BaseIYSolverImpl.cs" srcType="base" uri="impl.sp.solve.YSolver/bin/1.0.0.0/BaseIYSolverImpl.dll" versionId="1.0.0.0">
          <dependency>common.datapartition.MultiPartitionCells/bin/1.0.0.0/ICells.dll</dependency>
          <dependency>common.topology.Ring/bin/1.0.0.0/ICell.dll</dependency>
          <dependency>sp.solve.LHS/bin/1.0.0.0/ILHS.dll</dependency>
          <dependency>sp.problem_size.Instance_SP/bin/1.0.0.0/IInstance_SP.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>adi.data.ProblemDefinition/bin/1.0.0.0/IProblemDefinition.dll</dependency>
          <dependency>sp.solve.BlockDiagonalMatVecProduct/bin/1.0.0.0/IBlockDiagonalMatVecProduct.dll</dependency>
          <dependency>common.Buffer/bin/1.0.0.0/IBuffer.dll</dependency>
          <dependency>sp.solve.Forward/bin/1.0.0.0/IForward.dll</dependency>
          <dependency>sp.solve.SPMethod/bin/1.0.0.0/ISPMethod.dll</dependency>
          <dependency>common.axis.YAxis/bin/1.0.0.0/IY.dll</dependency>
          <dependency>common.interactionpattern.Shift/bin/1.0.0.0/IShift.dll</dependency>
          <dependency>common.direction.LeftToRight/bin/1.0.0.0/ILeftToRight.dll</dependency>
          <dependency>environment.MPIDirect/bin/1.0.0.0/IMPIDirect.dll</dependency>
          <dependency>common.problem_size.Instance/bin/1.0.0.0/IInstance.dll</dependency>
          <dependency>sp.solve.Backward/bin/1.0.0.0/IBackward.dll</dependency>
          <dependency>sp.solve.Solve/bin/1.0.0.0/BaseISolve.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using sp.problem_size.Instance_SP;&#xA;using common.problem_size.Class;&#xA;using sp.solve.SPMethod;&#xA;using common.axis.YAxis;&#xA;using sp.solve.Solver;&#xA;&#xA;namespace impl.sp.solve.YSolver { &#xA;&#xA;&#x9;public class IYSolverImpl&lt;I, C, MTH, DIR> : BaseIYSolverImpl&lt;I, C, MTH, DIR>, ISPSolver&lt;I, C, MTH, DIR>&#xA;&#x9;&#x9;where I:IInstance_SP&lt;C>&#xA;&#x9;&#x9;where C:IClass&#xA;&#x9;&#x9;where MTH:ISPMethod&#xA;&#x9;&#x9;where DIR:IY&#xA;&#x9;{&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected double[,][] in_buffer_solver, out_buffer_solver;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;void create_buffers() &#x9;&#x9;&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int c, stage, isize, ksize, buffer_size;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;in_buffer_solver = new double[2,ncells][];&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;out_buffer_solver = new double[2,ncells][];&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for (stage = 0; stage &lt; ncells; stage++)&#xA;            {&#xA;                c = slice[stage, 1];&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;                isize = cell_size[c, 0] + 2;&#xA;                ksize = cell_size[c, 2] + 2;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;                buffer_size = (isize - start[c, 0] - end[c, 0]) * (ksize - start[c, 2] - end[c, 2]);&#xA;&#xA;                in_buffer_solver[0,stage] = new double[22*buffer_size];&#xA;                out_buffer_solver[0,stage] = new double[22 * buffer_size];&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;                in_buffer_solver[1,stage] = new double[10 * buffer_size];&#xA;                out_buffer_solver[1,stage] = new double[10 * buffer_size];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;private bool buffers_ok = false;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public override int go() &#xA;&#x9;&#x9;{&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (!buffers_ok)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;this.create_buffers();&#xA;&#x9;&#x9;&#x9;&#x9;buffers_ok = true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;            int i, j, k, stage, n, isize, jend, ksize, j1, c, m, p, jstart; /* requests(2), statuses(MPI_STATUS_SIZE, 2);*/&#xA;            double r1, r2, d, e, sm1, sm2;&#xA;            double[] s = new double[5];&#xA;            double[] in_buffer_y;&#xA;            double[] out_buffer_y;&#xA;&#xA;            //---------------------------------------------------------------------&#xA;            //---------------------------------------------------------------------&#xA;&#xA;            // if (timeron) timer.start(t_ysolve);&#xA;&#xA;            //---------------------------------------------------------------------&#xA;            // now do a sweep on a layer-by-layer basis, i.e. sweeping through cells&#xA;            // on this node in the direction of increasing i for the forward sweep,&#xA;            // and after that reversing the direction for the backsubstitution  &#xA;            //---------------------------------------------------------------------&#xA;&#xA;            //---------------------------------------------------------------------&#xA;            //                          FORWARD ELIMINATION  &#xA;            //---------------------------------------------------------------------&#xA;            for (stage = 0; stage &lt; ncells; stage++)&#xA;            {&#xA;&#x9;&#x9;&#x9;&#x9;Lhs.enterStage(stage);&#xA;&#x9;&#x9;&#x9;&#x9;Forward.enterStage(stage);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;                c = slice[stage, 1];&#xA;&#xA;                jstart = 2;&#xA;                jend = 2 + cell_size[c, 1] - 1;&#xA;&#xA;                isize = cell_size[c, 0] + 2;&#xA;                ksize = cell_size[c, 2] + 2;&#xA;&#xA;               // buffer_size = (isize - start[c, 0] - end[c, 0]) * (ksize - start[c, 2] - end[c, 2]);&#xA;&#xA;                Input_buffer_forward.Array = in_buffer_y = in_buffer_solver[0,stage]; // new double[22*buffer_size];&#xA;                Output_buffer_forward.Array = out_buffer_y = out_buffer_solver[0,stage]; //new double[22*buffer_size];&#xA;&#xA;                if (stage != 0)&#xA;                {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Shift_forward.initiate_recv();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Lhs.go();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Shift_forward.go();&#xA;&#xA;                    #region read buffer&#xA;                    //---------------------------------------------------------------------&#xA;                    //            unpack the buffer                                 &#xA;                    //---------------------------------------------------------------------&#xA;                    j = jstart;&#xA;                    j1 = jstart + 1;&#xA;                    n = -1;&#xA;                    //---------------------------------------------------------------------&#xA;                    //            create a running pointer&#xA;                    //---------------------------------------------------------------------&#xA;                    p = 0;&#xA;                    for (k = start[c, 2]; k &lt; ksize - end[c, 2]; k++)&#xA;                    {&#xA;                        for (i = start[c, 0]; i &lt; isize - end[c, 0]; i++)&#xA;                        {&#xA;                      //      Console.WriteLine(&quot;in_buffer_y_f[&quot;+ p + &quot;] = &quot; + in_buffer_y[p]);&#xA;                      //      Console.WriteLine(&quot;in_buffer_y_f[&quot;+ (p+1) + &quot;] = &quot; + in_buffer_y[p+1]);&#xA;                            lhs[c, k, j, i, n + 2] = lhs[c, k, j, i, n + 2] -&#xA;                                    in_buffer_y[p] * lhs[c, k, j, i, n + 1];&#xA;                            lhs[c, k, j, i, n + 3] = lhs[c, k, j, i, n + 3] -&#xA;                                    in_buffer_y[p + 1] * lhs[c, k, j, i, n + 1];&#xA;                            for (m = 0; m &lt;= 2; m++)&#xA;                            {&#xA;                      //          Console.WriteLine(&quot;in_buffer_y_f[&quot;+ (p+2+m) + &quot;] = &quot; + in_buffer_y[p+2+m]);&#xA;                                rhs[c, k, j, i, m] = rhs[c, k, j, i, m] -&#xA;                                      in_buffer_y[p + 2 + m] * lhs[c, k, j, i, n + 1];&#xA;                            }&#xA;                      //      Console.WriteLine(&quot;in_buffer_y_f[&quot;+ (p+5) + &quot;] = &quot; + in_buffer_y[p+5]);&#xA;                      //      Console.WriteLine(&quot;in_buffer_y_f[&quot;+ (p+6) + &quot;] = &quot; + in_buffer_y[p+6]);&#xA;                            d = in_buffer_y[p + 5]; ;&#xA;                            e = in_buffer_y[p + 6];&#xA;                            for (m = 0; m &lt;= 2; m++)&#xA;                            {&#xA;                       //        Console.WriteLine(&quot;in_buffer_y_f[&quot;+ (p+7+m) + &quot;] = &quot; + in_buffer_y[p+7+m]);&#xA;                                s[m] = in_buffer_y[p + 7 + m];&#xA;                            }&#xA;                            r1 = lhs[c, k, j, i, n + 2];&#xA;                            lhs[c, k, j, i, n + 3] = lhs[c, k, j, i, n + 3] - d * r1;&#xA;                            lhs[c, k, j, i, n + 4] = lhs[c, k, j, i, n + 4] - e * r1;&#xA;                            for (m = 0; m &lt;= 2; m++)&#xA;                            {&#xA;                                rhs[c, k, j, i, m] = rhs[c, k, j, i, m] - s[m] * r1;&#xA;                            }&#xA;                            r2 = lhs[c, k, j1, i, n+1];&#xA;                            lhs[c, k, j1, i, n + 2] = lhs[c, k, j1, i, n + 2] - d * r2;&#xA;                            lhs[c, k, j1, i, n + 3] = lhs[c, k, j1, i, n + 3] - e * r2;&#xA;                            for (m = 0; m &lt;= 2; m++)&#xA;                            {&#xA;                                rhs[c, k, j1, i, m] = rhs[c, k, j1, i, m] - s[m] * r2;&#xA;                            }&#xA;                            p = p + 10;&#xA;                        }&#xA;                    }&#xA;&#xA;                    for (m = 3; m &lt;= 4; m++)&#xA;                    {&#xA;                        n = (m - 2) * 5 - 1;&#xA;                        for (k = start[c, 2]; k &lt; ksize - end[c, 2]; k++)&#xA;                        {&#xA;                            for (i = start[c, 0]; i &lt; isize - end[c, 0]; i++)&#xA;                            {&#xA;                                lhs[c, k, j, i, n + 2] = lhs[c, k, j, i, n + 2] -&#xA;                                         in_buffer_y[p] * lhs[c, k, j, i, n + 1];&#xA;                                lhs[c, k, j, i, n + 3] = lhs[c, k, j, i, n + 3] -&#xA;                                         in_buffer_y[p + 1] * lhs[c, k, j, i, n + 1];&#xA;                                rhs[c, k, j, i, m] = rhs[c, k, j, i, m] -&#xA;                                         in_buffer_y[p + 2] * lhs[c, k, j, i, n + 1];&#xA;                                d = in_buffer_y[p + 3];&#xA;                                e = in_buffer_y[p + 4];&#xA;                                s[m] = in_buffer_y[p + 5];&#xA;                                r1 = lhs[c, k, j, i, n + 2];&#xA;                                lhs[c, k, j, i, n + 3] = lhs[c, k, j, i, n + 3] - d * r1;&#xA;                                lhs[c, k, j, i, n + 4] = lhs[c, k, j, i, n + 4] - e * r1;&#xA;                                rhs[c, k, j, i, m] = rhs[c, k, j, i, m] - s[m] * r1;&#xA;                                r2 = lhs[c, k, j1, i, n + 1];&#xA;                                lhs[c, k, j1, i, n + 2] = lhs[c, k, j1, i, n + 2] - d * r2;&#xA;                                lhs[c, k, j1, i, n + 3] = lhs[c, k, j1, i, n + 3] - e * r2;&#xA;                                rhs[c, k, j1, i, m] = rhs[c, k, j1, i, m] - s[m] * r2;&#xA;                                p = p + 6;&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                    #endregion&#xA;                }&#xA;                else&#xA;                {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Lhs.go();&#xA;                }&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Forward.go();&#xA;&#xA;                //---------------------------------------------------------------------&#xA;                //         send information to the next processor, except when this&#xA;                //         is the last grid block;&#xA;                //---------------------------------------------------------------------&#xA;&#xA;                if (stage != ncells - 1)&#xA;                {&#xA;                    #region write buffer&#xA;                    //---------------------------------------------------------------------&#xA;                    //            create a running pointer for the send buffer  &#xA;                    //---------------------------------------------------------------------&#xA;                    p = 0;&#xA;                    n = -1;&#xA;                    for (k = start[c, 2]; k &lt; ksize - end[c, 2]; k++)&#xA;                    {&#xA;                        for (i = start[c, 0]; i &lt; isize - end[c, 0]; i++)&#xA;                        {&#xA;                            for (j = jend - 1; j &lt;= jend; j++)&#xA;                            {&#xA;                                out_buffer_y[p    ] = lhs[c, k, j, i, n + 4];&#xA;                                out_buffer_y[p + 1] = lhs[c, k, j, i, n + 5];&#xA;                           //     Console.WriteLine(&quot;out_buffer_y[&quot;+ p + &quot;] = &quot; + out_buffer_y[p]);&#xA;                            //    Console.WriteLine(&quot;out_buffer_y[&quot;+ (p+1) + &quot;] = &quot; + out_buffer_y[p+1]);&#xA;                                for (m = 0; m &lt;= 2; m++)&#xA;                                {&#xA;                                    out_buffer_y[p + 2 + m] = rhs[c, k, j, i, m];&#xA;                             //       Console.WriteLine(&quot;out_buffer_y[&quot;+ (p+2+m) + &quot;] = &quot; + out_buffer_y[p+2+m]);&#xA;                                }&#xA;                                p = p + 5;&#xA;                            }&#xA;                        }&#xA;                    }&#xA;&#xA;                    for (m = 3; m &lt;= 4; m++)&#xA;                    {&#xA;                        n = (m - 2) * 5 - 1;&#xA;                        for (k = start[c, 2]; k &lt; ksize - end[c, 2]; k++)&#xA;                        {&#xA;                            for (i = start[c, 0]; i &lt; isize - end[c, 0]; i++)&#xA;                            {&#xA;                                for (j = jend - 1; j &lt;= jend; j++)&#xA;                                {&#xA;                                    out_buffer_y[p] = lhs[c, k, j, i, n + 4];&#xA;                                    out_buffer_y[p + 1] = lhs[c, k, j, i, n + 5];&#xA;                                    out_buffer_y[p + 2] = rhs[c, k, j, i, m];&#xA;                               //     Console.WriteLine(&quot;out_buffer_y[&quot;+ (p) + &quot;] = &quot; + out_buffer_y[p]);&#xA;                                //    Console.WriteLine(&quot;out_buffer_y[&quot;+ (p+1) + &quot;] = &quot; + out_buffer_y[p+1]);&#xA;                               //     Console.WriteLine(&quot;out_buffer_y[&quot;+ (p+2) + &quot;] = &quot; + out_buffer_y[p+2]);&#xA;                                    p = p + 3;&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    }&#xA;&#xA;                    #endregion&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Shift_forward.initiate_send();&#xA;                }&#xA;            }&#xA;&#xA;            //---------------------------------------------------------------------&#xA;            //      now go in the reverse direction                      &#xA;            //---------------------------------------------------------------------&#xA;&#xA;            //---------------------------------------------------------------------&#xA;            //                         BACKSUBSTITUTION &#xA;            //---------------------------------------------------------------------&#xA;            for (stage = ncells - 1; stage >= 0; stage--)&#xA;            {&#xA;&#x9;&#x9;&#x9;&#x9;Backward.enterStage(stage);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;                c = slice[stage, 1];&#xA;&#xA;                jstart = 2;&#xA;                jend = 2 + cell_size[c, 1] - 1;&#xA;&#xA;                isize = cell_size[c, 0] + 2;&#xA;                ksize = cell_size[c, 2] + 2;&#xA;&#xA;                //buffer_size = (isize - start[c, 0] - end[c, 0]) * (ksize - start[c, 2] - end[c, 2]);&#xA;&#xA;                Input_buffer_backward.Array = in_buffer_y = in_buffer_solver[1,stage]; // new double[10 * buffer_size];&#xA;                Output_buffer_backward.Array = out_buffer_y = out_buffer_solver[1,stage]; // new double[10 * buffer_size];&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;                if (stage != ncells - 1)&#xA;                {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Shift_backward.initiate_recv();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;    Matvecproduct.enterStage(stage + 1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Matvecproduct.go();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Shift_backward.go();&#xA;&#xA;                    #region read_buffer&#xA;                    //---------------------------------------------------------------------&#xA;                    //            unpack the buffer for the first three factors         &#xA;                    //---------------------------------------------------------------------&#xA;                    n = -1;&#xA;                    p = 0;&#xA;                    j = jend;&#xA;                    j1 = j - 1;&#xA;                    for (m = 0; m &lt;= 2; m++)&#xA;                    {&#xA;                        for (k = start[c, 2]; k &lt; ksize - end[c, 2]; k++)&#xA;                        {&#xA;                            for (i = start[c, 0]; i &lt; isize - end[c, 0]; i++)&#xA;                            {&#xA;&#x9;&#x9;                  //      Console.WriteLine(&quot;in_buffer_y[&quot;+ p + &quot;] = &quot; + in_buffer_y[p]);&#xA;&#x9;&#x9;                  //      Console.WriteLine(&quot;in_buffer_y[&quot;+ (p+1) + &quot;] = &quot; + in_buffer_y[p+1]);&#xA;                                sm1 = in_buffer_y[p];&#xA;                                sm2 = in_buffer_y[p + 1];&#xA;                                rhs[c, k, j, i, m] = rhs[c, k, j, i, m] -&#xA;                                       lhs[c, k, j, i, n + 4] * sm1 -&#xA;                                       lhs[c, k, j, i, n + 5] * sm2;&#xA;                                rhs[c, k, j1, i, m] = rhs[c, k, j1, i, m] -&#xA;                                       lhs[c, k, j1, i, n + 4] * rhs[c, k, j, i, m] -&#xA;                                       lhs[c, k, j1, i, n + 5] * sm1;&#xA;                                p = p + 2;&#xA;                            }&#xA;                        }&#xA;                    }&#xA;&#xA;                    //---------------------------------------------------------------------&#xA;                    //            now unpack the buffer for the remaining two factors&#xA;                    //---------------------------------------------------------------------&#xA;                    for (m = 3; m &lt;= 4; m++)&#xA;                    {&#xA;                        n = (m - 2) * 5 - 1;&#xA;                        for (k = start[c, 2]; k &lt; ksize - end[c, 2]; k++)&#xA;                        {&#xA;                            for (i = start[c, 0]; i &lt; isize - end[c, 0]; i++)&#xA;                            {&#xA;&#x9;&#x9;                   //     Console.WriteLine(&quot;in_buffer_y[&quot;+ p + &quot;] = &quot; + in_buffer_y[p]);&#xA;&#x9;&#x9;                   //     Console.WriteLine(&quot;in_buffer_y[&quot;+ (p+1) + &quot;] = &quot; + in_buffer_y[p+1]);&#xA;                                sm1 = in_buffer_y[p];&#xA;                                sm2 = in_buffer_y[p + 1];&#xA;                                rhs[c, k, j, i, m] = rhs[c, k, j, i, m] -&#xA;                                       lhs[c, k, j, i, n + 4] * sm1 -&#xA;                                       lhs[c, k, j, i, n + 5] * sm2;&#xA;                                rhs[c, k, j1, i, m] = rhs[c, k, j1, i, m] -&#xA;                                       lhs[c, k, j1, i, n + 4] * rhs[c, k, j, i, m] -&#xA;                                       lhs[c, k, j1, i, n + 5] * sm1;&#xA;                                p = p + 2;&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                    #endregion&#xA;                }&#xA;                else&#xA;                {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Backward.init();&#xA;                }&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Backward.go();&#xA;&#xA;                //---------------------------------------------------------------------&#xA;                //         send on information to the previous processor, if needed&#xA;                //---------------------------------------------------------------------&#xA;                if (stage != 0)&#xA;                {&#xA;                    #region write buffer&#xA;&#xA;                    j = jstart;&#xA;                    j1 = jstart + 1;&#xA;                    p = 0;&#xA;                    for (m = 0; m &lt;= 4; m++)&#xA;                    {&#xA;                        for (k = start[c, 2]; k &lt; ksize - end[c, 2]; k++)&#xA;                        {&#xA;                            for (i = start[c, 0]; i &lt; isize - end[c, 0]; i++)&#xA;                            {&#xA;                                out_buffer_y[p] = rhs[c, k, j, i, m];&#xA;                                out_buffer_y[p + 1] = rhs[c, k, j1, i, m];&#xA;                                p = p + 2;&#xA;                            }&#xA;                        }&#xA;                    }&#xA;&#xA;                    #endregion&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Shift_backward.initiate_send();&#xA;                }&#xA;&#xA;                //---------------------------------------------------------------------&#xA;                //         If this was the last stage, do the block-diagonal inversion          &#xA;                //---------------------------------------------------------------------&#xA;                if (stage == 0)&#xA;                {&#xA;                   Matvecproduct.enterStage(stage);&#xA;&#x9;&#x9;&#x9;&#x9;   Matvecproduct.go();&#xA;                }&#xA;&#xA;            }&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;return 0;&#x9;&#x9;&#xA;&#x9;&#x9;} // end activate method &#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;" fileType="library" name="IYSolverImpl.cs" srcType="user" uri="impl.sp.solve.YSolver/bin/1.0.0.0/IYSolverImpl.dll" versionId="1.0.0.0">
          <dependency>sp.problem_size.Instance_SP/bin/1.0.0.0/IInstance_SP.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>sp.solve.SPMethod/bin/1.0.0.0/ISPMethod.dll</dependency>
          <dependency>common.axis.YAxis/bin/1.0.0.0/IY.dll</dependency>
          <dependency>%WORKSPACE/impl.sp.solve.YSolver/bin/1.0.0.0/BaseIYSolverImpl.dll</dependency>
          <dependency>sp.solve.Solve/bin/1.0.0.0/ISolve.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="96" x="66" y="57">
        <color b="0" g="0" r="255"/>
      </visualDescription>
      <port name="cells">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="cells" sRef="forward"/>
        <slice pRef="cells" sRef="backward"/>
        <slice pRef="cells" sRef="lhs"/>
        <slice pRef="cells" sRef="matvecproduct"/>
      </port>
      <port name="problem">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="problem" sRef="forward"/>
        <slice pRef="problem" sRef="backward"/>
        <slice pRef="problem" sRef="lhs"/>
        <slice pRef="problem" sRef="matvecproduct"/>
      </port>
      <port name="cell">
        <visualDescription h="10" w="10" x="32" y="67"/>
        <slice pRef="cell" sRef="shift_backward"/>
        <slice pRef="cell" sRef="shift_forward"/>
      </port>
      <port name="mpi">
        <visualDescription h="10" w="10" x="112" y="62"/>
        <slice pRef="mpi" sRef="shift_backward"/>
        <slice pRef="mpi" sRef="shift_forward"/>
      </port>
      <port name="output_buffer_backward">
        <visualDescription h="10" w="10" x="86" y="62"/>
        <slice pRef="output_buffer" sRef="shift_backward"/>
      </port>
      <port name="input_buffer_backward">
        <visualDescription h="10" w="10" x="102" y="20"/>
        <slice pRef="input_buffer" sRef="shift_backward"/>
      </port>
      <port name="output_buffer_forward">
        <visualDescription h="10" w="10" x="124" y="11"/>
        <slice pRef="output_buffer" sRef="shift_forward"/>
      </port>
      <port name="input_buffer_forward">
        <visualDescription h="10" w="10" x="114" y="50"/>
        <slice pRef="input_buffer" sRef="shift_forward"/>
      </port>
      <parameter iname="IInstance_SP" order="0" parid="instance_type" uname="instance" varid="I"/>
      <parameter iname="IClass" order="1" parid="class" uname="class" varid="C"/>
      <parameter iname="ISPMethod" order="2" parid="method" uname="method" varid="MTH"/>
      <parameter iname="IY" order="3" parid="axis" uname="y" varid="DIR"/>
    </interface>
    <unit iRef="IYSolverImpl" multiple="true" private="false" replica="0" uRef="solve" visibleInterface="true">
      <super cRef="base" uRef="solve"/>
      <visualDescription h="40" w="80" x="119" y="160"/>
    </unit>
  </componentInfo>
</component:component>