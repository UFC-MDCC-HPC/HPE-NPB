/*
!-------------------------------------------------------------------------!
!									  !
!	 N  A  S     P A R A L L E L	 B E N C H M A R K S  3.0	  !
!									  !
!			J A V A 	V E R S I O N			  !
!									  !
!                               B T B a s e                               !
!                                                                         !
!-------------------------------------------------------------------------!
!                                                                         !
!    BTbase implements base class for BT benchmark.                       !
!									  !
!    Permission to use, copy, distribute and modify this software	  !
!    for any purpose with or without fee is hereby granted.  We 	  !
!    request, however, that all derived work reference the NAS  	  !
!    Parallel Benchmarks 3.0. This software is provided "as is" 	  !
!    without express or implied warranty.				  !
!									  !
!    Information on NPB 3.0, including the Technical Report NAS-02-008	  !
!    "Implementation of the NAS Parallel Benchmarks in Java",		  !
!    original specifications, source code, results and information	  !
!    on how to submit new results, is available at:			  !
!									  !
!	    http://www.nas.nasa.gov/Software/NPB/			  !
!									  !
!    Send comments or suggestions to  npb@nas.nasa.gov  		  !
!									  !
!	   NAS Parallel Benchmarks Group				  !
!	   NASA Ames Research Center					  !
!	   Mail Stop: T27A-1						  !
!	   Moffett Field, CA   94035-1000				  !
!									  !
!	   E-mail:  npb@nas.nasa.gov					  !
!	   Fax:     (650) 604-3957					  !
!									  !
!-------------------------------------------------------------------------!
!     Translation to Java and to MultiThreaded Code:			  !
!     Michael A. Frumkin					          !
!     Mathew Schultz	   					          !
!-------------------------------------------------------------------------!
*/
package NPB3_0_JAV.BTThreads;
import NPB3_0_JAV.BT;
import NPB3_0_JAV.*;

public class BTBase extends Thread{
 
  public static final String BMName="BT";
  public char CLASS = 'S';
  //npb class parameters  

  protected int IMAX=0, JMAX=0, KMAX=0,problem_size=0;
  
  protected int grid_points[] = {0,0,0};
  protected int niter_default=0;
  protected double dt_default=0.0;
    
  //array declarations from header.h
  protected double us[],vs[],ws[],
            	   qs[],rho_i[],square[]; 
  protected int jsize1, ksize1;
  
  protected double forcing[],u[],rhs[],
            	   cv[], cuf[],q[];
  protected int isize2,jsize2,ksize2;
  
  protected double ue[], buf[];
  protected int jsize3;

  //here 5 are the dimensions of the CFD vector
  //(density,x_impuls,y_impuls,z_impuls,energy)
  protected static final int isize4=5,jsize4=5*5, ksize4=5*5*3;
  protected static final int aa=0, bb=1, cc=2, BLOCK_SIZE=5;
 
  // constants
  protected static double tx1,tx2,tx3,dt,
         ty1,ty2,ty3,
         tz1,tz2,tz3,
         dx1,dx2,dx3,dx4,dx5,
         dy1,dy2,dy3,dy4,dy5,
         dz1,dz2,dz3,dz4,dz5,
         dssp,dxmax,dymax,dzmax,
         xxcon1,xxcon2,xxcon3,xxcon4,xxcon5,
         dx1tx1, dx2tx1,dx3tx1,dx4tx1,dx5tx1,
         yycon1,yycon2,yycon3,yycon4,yycon5,
         dy1ty1,dy2ty1,dy3ty1,dy4ty1,dy5ty1,
         zzcon1,zzcon2,zzcon3,zzcon4,zzcon5,
         dz1tz1,dz2tz1,dz3tz1,dz4tz1,dz5tz1,
         dnxm1,dnym1,dnzm1,
         c1c2, c1c5, c3c4, c1345, conz1, 
         c1, c2, c3, c4, c5, c4dssp, c5dssp, dtdssp, 
         dttx1, dttx2, dtty1, dtty2, dttz1, dttz2, 
         c2dttx1, c2dtty1, c2dttz1, 
         comz1, comz4, comz5, comz6,c3c4tx3, c3c4ty3, 
	 c3c4tz3, c2iv, con43, con16;

  protected static double ce[] = { 
                  2.0, 1.0, 2.0, 2.0, 5.0,
		  0.0, 0.0, 2.0, 2.0, 4.0,
		  0.0, 0.0, 0.0, 0.0, 3.0,
		  4.0, 0.0, 0.0, 0.0, 2.0,
		  5.0, 1.0, 0.0, 0.0, 0.1,
		  3.0, 2.0, 2.0, 2.0, 0.4,
		  0.5, 3.0, 3.0, 3.0, 0.3,
		  0.02, 0.01, 0.04, 0.03, 0.05,
		  0.01, 0.03, 0.03, 0.05, 0.04,
		  0.03, 0.02, 0.05, 0.04, 0.03,
		  0.5, 0.4, 0.3, 0.2, 0.1,
		  0.4, 0.3, 0.5, 0.1, 0.3,
		  0.3, 0.5, 0.4, 0.3, 0.2};
  
  //timer constants 
  public boolean timeron=false;
  public static final int t_rhsx=2, t_rhsy=3, t_rhsz=4,
                   t_xsolve=6,t_ysolve=7,t_zsolve=8,
                   t_rdis1=9,t_rdis2=10,t_add=11,
		   t_rhs=5,t_last=11,t_total=1; 
  public Timer timer = new Timer();
  
  public BTBase(){}

  public BTBase(char clss,int np){            
    CLASS = clss;
    num_threads = np;
    switch (clss){
     case 'S':
      problem_size = IMAX = JMAX = KMAX = 
                     grid_points[0] = grid_points[1] = grid_points[2] = 12;
      dt_default=.01;
      niter_default=60;
      CLASS='S';
      break;
    case 'W':
      problem_size = IMAX = JMAX = KMAX = 
                     grid_points[0] = grid_points[1] = grid_points[2] = 24;
      dt_default=.0008;
      niter_default=200;
      CLASS='W';
      break;
    case 'A':
      problem_size = IMAX = JMAX = KMAX = 
                     grid_points[0] = grid_points[1] = grid_points[2] = 64;
      dt_default=.0008;      
      niter_default=200;
      CLASS='A';
      break;
    case 'B':
      problem_size = IMAX = JMAX = KMAX = 
                     grid_points[0] = grid_points[1] = grid_points[2] = 102;
      dt_default=.0003;
      niter_default=200; 
      CLASS='B';
      break;
    case 'C':
      problem_size = IMAX = JMAX = KMAX = 
                     grid_points[0] = grid_points[1] = grid_points[2] = 162;
      dt_default=.0001;      
      niter_default=200;
      CLASS='C';
      break;
    }

  // set up arrays and array strides

    jsize1=IMAX/2*2+1;
    ksize1=(JMAX/2*2+1)*(IMAX/2*2+1);
    us =  new double[(IMAX/2*2+1)*(JMAX/2*2+1)*KMAX];
    vs =  new double[(IMAX/2*2+1)*(JMAX/2*2+1)*KMAX];
    ws =  new double[(IMAX/2*2+1)*(JMAX/2*2+1)*KMAX];
    qs =  new double[(IMAX/2*2+1)*(JMAX/2*2+1)*KMAX];
    rho_i =  new double[(IMAX/2*2+1)*(JMAX/2*2+1)*KMAX];
    square =  new double[(IMAX/2*2+1)*(JMAX/2*2+1)*KMAX];
    
    isize2=5;
    jsize2=5*(IMAX/2*2+1); 
    ksize2=5*(IMAX/2*2+1)*(JMAX/2*2+1);
    
    forcing = new double[5*(IMAX/2*2+1)*(JMAX/2*2+1)*KMAX];
    u =  new double[5*(IMAX/2*2+1)*(JMAX/2*2+1)*KMAX];
    rhs =  new double[5*(IMAX/2*2+1)*(JMAX/2*2+1)*KMAX];
    
    cv =  new double[problem_size+2];
    cuf =  new double[problem_size+2];
    q =  new double[problem_size+2];
    
    jsize3=(problem_size+2);
    ue = new double[(problem_size+2)*5];
    buf = new double[(problem_size+2)*5];   
  }
  
  protected int index2(int k, int j, int i, int m)
  {
      return m + i * isize2 + j * jsize2 + k * ksize2;
  }

  protected int index1(int k, int j, int i)
  {
      return i + j * jsize1 + k * ksize1;
  }

  protected int index3(int j, int i)
  {
      return j + i * jsize3;
  }

  protected int index4(int k, int j, int i, int m)
  {
      return m+ i * isize4 + j * jsize4 + k * ksize4;
  }

  protected int index5(int j, int i, int m)
  {
      return m+ i * isize4 + j * jsize4;
  }
  
//  4+0*isize4+i*jsize4
  
  // thread variables
  protected Thread master = null;
  protected int num_threads;
  protected RHSCompute rhscomputer[];
  protected RHSAdder rhsadder[];
    

  public void set_interval(int problem_size, int interval[] ){
    interval[0]= problem_size/num_threads;
    for(int i=1;i<num_threads;i++) interval[i]=interval[0];
    int remainder = problem_size%num_threads;
    for(int i=0;i<remainder;i++) interval[i]++;
  }  
  
  public void set_partition(int start, int interval[], int array[][]){
    array[0][0]=start;
    if(start==0) array[0][1]=interval[0]-1;
    else array[0][1]=interval[0];
    
    for(int i=1;i<interval.length;i++){
      array[i][0]=array[i-1][1]+1;
      array[i][1]=array[i-1][1]+interval[i];
    }
  }

  public double dmax1(double a, double b){
    if(a<b) return b; else return a;
  }
  
  public void set_constants(){
    c1 = 1.4;
    c2 = 0.4;
    c3 = 0.1;
    c4 = 1.0;
    c5 = 1.4;
    dnxm1 = 1.0 / (grid_points[0]-1);
    dnym1 = 1.0 / (grid_points[1]-1);
    dnzm1 = 1.0 / (grid_points[2]-1);

    c1c2 = c1 * c2;
    c1c5 = c1 * c5;
    c3c4 = c3 * c4;
    c1345 = c1c5 * c3c4;

    conz1 = (1.0-c1c5);

    tx1 = 1.0 / (dnxm1 * dnxm1);
    tx2 = 1.0 / (2.0 * dnxm1);
    tx3 = 1.0 / dnxm1;

    ty1 = 1.0 / (dnym1 * dnym1);
    ty2 = 1.0 / (2.0 * dnym1);
    ty3 = 1.0 / dnym1;

    tz1 = 1.0 / (dnzm1 * dnzm1);
    tz2 = 1.0 / (2.0 * dnzm1);
    tz3 = 1.0 / dnzm1;

    dx1 = 0.75;
    dx2 = 0.75;
    dx3 = 0.75;
    dx4 = 0.75;
    dx5 = 0.75;

    dy1 = 0.75;
    dy2 = 0.75;
    dy3 = 0.75;
    dy4 = 0.75;
    dy5 = 0.75;

    dz1 = 1.0;
    dz2 = 1.0;
    dz3 = 1.0;
    dz4 = 1.0;
    dz5 = 1.0;

    dxmax = dmax1(dx3, dx4);
    dymax = dmax1(dy2, dy4);
    dzmax = dmax1(dz2, dz3);

    dssp = 0.25 * dmax1(dx1, dmax1(dy1, dz1) );

    c4dssp = 4.0 * dssp;
    c5dssp = 5.0 * dssp;

    dttx1 = dt*tx1;
    dttx2 = dt*tx2;
    dtty1 = dt*ty1;
    dtty2 = dt*ty2;
    dttz1 = dt*tz1;
    dttz2 = dt*tz2;

    c2dttx1 = 2.0*dttx1;
    c2dtty1 = 2.0*dtty1;
    c2dttz1 = 2.0*dttz1;

    dtdssp = dt*dssp;

    comz1= dtdssp;
    comz4= 4.0*dtdssp;
    comz5= 5.0*dtdssp;
    comz6= 6.0*dtdssp;

    c3c4tx3 = c3c4*tx3;
    c3c4ty3 = c3c4*ty3;
    c3c4tz3 = c3c4*tz3;

    dx1tx1 = dx1*tx1;
    dx2tx1 = dx2*tx1;
    dx3tx1 = dx3*tx1;
    dx4tx1 = dx4*tx1;
    dx5tx1 = dx5*tx1;

    dy1ty1 = dy1*ty1;
    dy2ty1 = dy2*ty1;
    dy3ty1 = dy3*ty1;
    dy4ty1 = dy4*ty1;
    dy5ty1 = dy5*ty1;

    dz1tz1 = dz1*tz1;
    dz2tz1 = dz2*tz1;
    dz3tz1 = dz3*tz1;
    dz4tz1 = dz4*tz1;
    dz5tz1 = dz5*tz1;

    c2iv= 2.5;
    con43 = 4.0/3.0;
    con16 = 1.0/6.0;

    xxcon1 = c3c4tx3*con43*tx3;
    xxcon2 = c3c4tx3*tx3;
    xxcon3 = c3c4tx3*conz1*tx3;
    xxcon4 = c3c4tx3*con16*tx3;
    xxcon5 = c3c4tx3*c1c5*tx3;

    yycon1 = c3c4ty3*con43*ty3;
    yycon2 = c3c4ty3*ty3;
    yycon3 = c3c4ty3*conz1*ty3;
    yycon4 = c3c4ty3*con16*ty3;
    yycon5 = c3c4ty3*c1c5*ty3;

    zzcon1 = c3c4tz3*con43*tz3;
    zzcon2 = c3c4tz3*tz3;
    zzcon3 = c3c4tz3*conz1*tz3;
    zzcon4 = c3c4tz3*con16*tz3;
    zzcon5 = c3c4tz3*c1c5*tz3;
    dt=dt_default;
  } 

  public void exact_solution(double xi,double eta, double zeta, 
                             double dtemp[], int dtmpoffst){
    for(int m=0;m<5;m++){
      dtemp[m + dtmpoffst] = ce[m+0*5] 
                           + xi*(ce[m+1*5] + xi*(ce[m+4*5] 
                           + xi*(ce[m+7*5] + xi*ce[m+10*5]))) 
			   + eta*(ce[m+2*5] + eta*(ce[m+5*5] 
			   + eta*(ce[m+8*5] + eta*ce[m+11*5])))
			   + zeta*(ce[m+3*5] + zeta*(ce[m+6*5] 
			   + zeta*(ce[m+9*5] + zeta*ce[m+12*5])));
    }
  }
  
  
  
  
  
  public void initialize()
  {
      int i, j, k, m, ix, iy, iz;
      double xi, eta, zeta;
      double[] Pface = new double[5 * 3 * 2];
      double Pxi, Peta, Pzeta;
      double[] temp = new double[5];


      //---------------------------------------------------------------------
      //  Later (in compute_rhs) we compute 1/u for every element. A few of
      //  the corner elements are not used, but it convenient (and faster)
      //  to compute the whole thing with a simple loop. Make sure those
      //  values are nonzero by initializing the whole thing here.
      //---------------------------------------------------------------------
      for (k = 0; k <= grid_points[2] - 1; k++)
      {
          for (j = 0; j <= grid_points[1] - 1; j++)
          {
              for (i = 0; i <= grid_points[0] - 1; i++)
              {
                  for (m = 0; m <= 4; m++)
                  {
                      u[index2(k,j,i,m)] = 1.0;
                  }
              }
          }
      }
      //---------------------------------------------------------------------
      //     first store the "interpolated" values everywhere on the grid    
      //---------------------------------------------------------------------

      for (k = 0; k <= grid_points[2] - 1; k++)
      {
          zeta = k * dnzm1;
          for (j = 0; j <= grid_points[1] - 1; j++)
          {
              eta = j * dnym1;
              for (i = 0; i <= grid_points[0] - 1; i++)
              {
                  xi = i * dnxm1;

                  for (ix = 0; ix <= 1; ix++)
                  {
                      exact_solution(ix, eta, zeta,
                                     Pface, 0 + 0 * 5 + ix * 15);

                  }
                  for (iy = 0; iy <= 1; iy++)
                  {
                      exact_solution(xi, iy, zeta,
                                     Pface, 0 + 1 * 5 + iy * 15);
                  }

                  for (iz = 0; iz <= 1; iz++)
                  {
                      exact_solution(xi, eta, iz,
                                     Pface, 0 + 2 * 5 + iz * 15);
                  }

                  for (m = 0; m <= 4; m++)
                  {
                      Pxi = xi * Pface[m + 0 * 5 + 1 * 15] +
                        (1.0 - xi) * Pface[m + 0 * 5 + 0 * 15];
                      Peta = eta * Pface[m + 1 * 5 + 1 * 15] +
                        (1.0 - eta) * Pface[m + 1 * 5 + 0 * 15];
                      Pzeta = zeta * Pface[m + 2 * 5 + 1 * 15] +
                        (1.0 - zeta) * Pface[m + 2 * 5 + 0 * 15];

                      u[index2(k,j,i,m)] = Pxi + Peta + Pzeta -
                        Pxi * Peta - Pxi * Pzeta - Peta * Pzeta +
                        Pxi * Peta * Pzeta;

                  }
              }
          }
      }
      //---------------------------------------------------------------------
      //     now store the exact values on the boundaries        
      //---------------------------------------------------------------------

      //---------------------------------------------------------------------
      //     west face                                                  
      //---------------------------------------------------------------------
      i = 0;
      xi = 0.0;
      for (k = 0; k <= grid_points[2] - 1; k++)
      {
          zeta = k * dnzm1;
          for (j = 0; j <= grid_points[1] - 1; j++)
          {
              eta = j * dnym1;
              exact_solution(xi, eta, zeta, temp, 0);
              for (m = 0; m <= 4; m++)
              {
                  u[index2(k,j,i,m)] = temp[m];
              }
          }
      }

      //---------------------------------------------------------------------
      //     east face                                                      
      //---------------------------------------------------------------------

      i = grid_points[0] - 1;
      xi = 1.0;
      for (k = 0; k <= grid_points[2] - 1; k++)
      {
          zeta = k * dnzm1;
          for (j = 0; j <= grid_points[1] - 1; j++)
          {
              eta = j * dnym1;
              exact_solution(xi, eta, zeta, temp, 0);
              for (m = 0; m <= 4; m++)
              {
                  u[index2(k,j,i,m)] = temp[m];
              }
          }
      }

      //---------------------------------------------------------------------
      //     south face                                                
      //---------------------------------------------------------------------
      j = 0;
      eta = 0.0;
      for (k = 0; k <= grid_points[2] - 1; k++)
      {
          zeta = k * dnzm1;
          for (i = 0; i <= grid_points[0] - 1; i++)
          {
              xi = i * dnxm1;
              exact_solution(xi, eta, zeta, temp, 0);
              for (m = 0; m <= 4; m++)
              {
                  u[index2(k,j,i,m)] = temp[m];
              }
          }
      }

      //---------------------------------------------------------------------
      //     north face                                    
      //---------------------------------------------------------------------
      j = grid_points[1] - 1;
      eta = 1.0;
      for (k = 0; k <= grid_points[2] - 1; k++)
      {
          zeta = k * dnzm1;
          for (i = 0; i <= grid_points[0] - 1; i++)
          {
              xi = i * dnxm1;
              exact_solution(xi, eta, zeta, temp, 0);
              for (m = 0; m <= 4; m++)
              {
                  u[index2(k,j,i,m)] = temp[m];
              }
          }
      }

      //---------------------------------------------------------------------
      //     bottom face                                      
      //---------------------------------------------------------------------
      k = 0;
      zeta = 0.0;
      for (i = 0; i <= grid_points[0] - 1; i++)
      {
          xi = i * dnxm1;
          for (j = 0; j <= grid_points[1] - 1; j++)
          {
              eta = j * dnym1;
              exact_solution(xi, eta, zeta, temp, 0);
              for (m = 0; m <= 4; m++)
              {
                  u[index2(k,j,i,m)] = temp[m];
              }
          }
      }

      //---------------------------------------------------------------------
      //     top face    
      //---------------------------------------------------------------------
      k = grid_points[2] - 1;
      zeta = 1.0;
      for (i = 0; i <= grid_points[0] - 1; i++)
      {
          xi = i * dnxm1;
          for (j = 0; j <= grid_points[1] - 1; j++)
          {
              eta = j * dnym1;
              exact_solution(xi, eta, zeta, temp, 0);
              for (m = 0; m <= 4; m++)
              {
                  u[index2(k,j,i,m)] = temp[m];
              }
          }
      }
  }

  public void lhsinit(double[] lhs, int size)
  {
      int i, m, n;
      //---------------------------------------------------------------------
      //     zero the whole left hand side for starters
      //---------------------------------------------------------------------
      for (i = 0; i <= size; i += size)
      {
          for (m = 0; m <= 4; m++)
          {
              for (n = 0; n <= 4; n++)
              {
                  lhs[index4(i,0,n,m)] = 0.0;
                  lhs[index4(i,1,n,m)] = 0.0;
                  lhs[index4(i,2,n,m)] = 0.0;
              }
          }
      }
      //---------------------------------------------------------------------
      //     next, set all diagonal values to 1. This is overkill, but convenient
      //---------------------------------------------------------------------
      for (i = 0; i <= size; i += size)
      {
          for (m = 0; m <= 4; m++)
          {
              lhs[index4(i,1,m,m)] = 1.0;
          }
      }
  }

  public void matvec_sub(double[] ablock, int blkoffst1, int blkoffst2,
                         double[] avect, int avcoffst1, int avcoffst2, int avcoffst3,
                         double[] bvect, int bvcoffst1, int bvcoffst2, int bvcoffst3)
  {

      for (int i = 0; i < 5; i++)
      {
          bvect[index2( bvcoffst3,bvcoffst2,bvcoffst1,i)] += -ablock[index4(blkoffst2,blkoffst1,0,i)] * avect[index2(avcoffst3,avcoffst2,avcoffst1,0)]
                               - ablock[index4(blkoffst2,blkoffst1,1,i)] * avect[index2(avcoffst3,avcoffst2,avcoffst1,1)]
                               - ablock[index4(blkoffst2,blkoffst1,2,i)] * avect[index2(avcoffst3,avcoffst2,avcoffst1,2)]
                               - ablock[index4(blkoffst2,blkoffst1,3,i)] * avect[index2(avcoffst3,avcoffst2,avcoffst1,3)]
                               - ablock[index4(blkoffst2,blkoffst1,4,i)] * avect[index2(avcoffst3,avcoffst2,avcoffst1,4)];
      }
  }

  public void matmul_sub(double[] ablock, int ablkoffst1, int ablkoffst2,
	                       double[] bblock, int bblkoffst1, int bblkoffst2,
	                       double[] cblock, int cblkoffst1, int cblkoffst2)
  {
      for (int j = 0; j < 5; j++)
      {


          cblock[index4(cblkoffst2,cblkoffst1,j,0)] += -ablock[index4(ablkoffst2,ablkoffst1,0,0)] * bblock[index4(bblkoffst2,bblkoffst1,j,0)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,1,0)] * bblock[index4(bblkoffst2,bblkoffst1,j,1)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,2,0)] * bblock[index4(bblkoffst2,bblkoffst1,j,2)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,3,0)] * bblock[index4(bblkoffst2,bblkoffst1,j,3)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,4,0)] * bblock[index4(bblkoffst2,bblkoffst1,j,4)];
			
			cblock[index4(cblkoffst2,cblkoffst1,j,1)] += -ablock[index4(ablkoffst2,ablkoffst1,0,1)] * bblock[index4(bblkoffst2,bblkoffst1,j,0)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,1,1)] * bblock[index4(bblkoffst2,bblkoffst1,j,1)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,2,1)] * bblock[index4(bblkoffst2,bblkoffst1,j,2)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,3,1)] * bblock[index4(bblkoffst2,bblkoffst1,j,3)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,4,1)] * bblock[index4(bblkoffst2,bblkoffst1,j,4)];

			cblock[index4(cblkoffst2,cblkoffst1,j,2)] += -ablock[index4(ablkoffst2,ablkoffst1,0,2)] * bblock[index4(bblkoffst2,bblkoffst1,j,0)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,1,2)] * bblock[index4(bblkoffst2,bblkoffst1,j,1)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,2,2)] * bblock[index4(bblkoffst2,bblkoffst1,j,2)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,3,2)] * bblock[index4(bblkoffst2,bblkoffst1,j,3)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,4,2)] * bblock[index4(bblkoffst2,bblkoffst1,j,4)];

			cblock[index4(cblkoffst2,cblkoffst1,j,3)] += -ablock[index4(ablkoffst2,ablkoffst1,0,3)] * bblock[index4(bblkoffst2,bblkoffst1,j,0)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,1,3)] * bblock[index4(bblkoffst2,bblkoffst1,j,1)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,2,3)] * bblock[index4(bblkoffst2,bblkoffst1,j,2)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,3,3)] * bblock[index4(bblkoffst2,bblkoffst1,j,3)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,4,3)] * bblock[index4(bblkoffst2,bblkoffst1,j,4)];

			cblock[index4(cblkoffst2,cblkoffst1,j,4)] += -ablock[index4(ablkoffst2,ablkoffst1,0,4)] * bblock[index4(bblkoffst2,bblkoffst1,j,0)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,1,4)] * bblock[index4(bblkoffst2,bblkoffst1,j,1)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,2,4)] * bblock[index4(bblkoffst2,bblkoffst1,j,2)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,3,4)] * bblock[index4(bblkoffst2,bblkoffst1,j,3)]
                                    - ablock[index4(ablkoffst2,ablkoffst1,4,4)] * bblock[index4(bblkoffst2,bblkoffst1,j,4)];
      }
  }

  public void binvcrhs(double[] lhss, int lhsoffst1, int lhsoffst2,
                       double[] c, int coffst1, int coffst2,
	                     double[] r, int roffst1, int roffst2, int roffst3)
  {
      double pivot;
      double coeff;

      pivot = 1.0 / lhss[index4(lhsoffst2,lhsoffst1,0,0)];
      lhss[index4(lhsoffst2,lhsoffst1,1,0)] *= pivot;
      lhss[index4(lhsoffst2,lhsoffst1,2,0)] *= pivot;
      lhss[index4(lhsoffst2,lhsoffst1,3,0)] *= pivot;
      lhss[index4(lhsoffst2,lhsoffst1,4,0)] *= pivot;
      c[index4(coffst2,coffst1,0,0)] *= pivot;
      c[index4(coffst2,coffst1,1,0)] *= pivot;
      c[index4(coffst2,coffst1,2,0)] *= pivot;
      c[index4(coffst2,coffst1,3,0)] *= pivot;
      c[index4(coffst2,coffst1,4,0)] *= pivot;
      r[index2(roffst3,roffst2,roffst1,0)] *= pivot;

      coeff = lhss[index4(lhsoffst2,lhsoffst1,0,1)];
      lhss[index4(lhsoffst2,lhsoffst1,1,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,1,0)];
      lhss[index4(lhsoffst2,lhsoffst1,2,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,0)];
      lhss[index4(lhsoffst2,lhsoffst1,3,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,0)];
      lhss[index4(lhsoffst2,lhsoffst1,4,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,0)];
      c[index4(coffst2,coffst1,0,1)] -= coeff * c[index4(coffst2,coffst1,0,0)];
      c[index4(coffst2,coffst1,1,1)] -= coeff * c[index4(coffst2,coffst1,1,0)];
      c[index4(coffst2,coffst1,2,1)] -= coeff * c[index4(coffst2,coffst1,2,0)];
      c[index4(coffst2,coffst1,3,1)] -= coeff * c[index4(coffst2,coffst1,3,0)];
      c[index4(coffst2,coffst1,4,1)] -= coeff * c[index4(coffst2,coffst1,4,0)];
      r[index2(roffst3,roffst2,roffst1,1)] -= coeff * r[index2(roffst3,roffst2,roffst1,0)];

		coeff = lhss[index4(lhsoffst2,lhsoffst1,0,2)];
      lhss[index4(lhsoffst2,lhsoffst1,1,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,1,0)];
      lhss[index4(lhsoffst2,lhsoffst1,2,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,0)];
      lhss[index4(lhsoffst2,lhsoffst1,3,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,0)];
      lhss[index4(lhsoffst2,lhsoffst1,4,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,0)];
      c[index4(coffst2,coffst1,0,2)] -= coeff * c[index4(coffst2,coffst1,0,0)];
      c[index4(coffst2,coffst1,1,2)] -= coeff * c[index4(coffst2,coffst1,1,0)];
      c[index4(coffst2,coffst1,2,2)] -= coeff * c[index4(coffst2,coffst1,2,0)];
      c[index4(coffst2,coffst1,3,2)] -= coeff * c[index4(coffst2,coffst1,3,0)];
      c[index4(coffst2,coffst1,4,2)] -= coeff * c[index4(coffst2,coffst1,4,0)];
      r[index2(roffst3,roffst2,roffst1,2)] -= coeff * r[index2(roffst3,roffst2,roffst1,0)];
		coeff = lhss[index4(lhsoffst2,lhsoffst1,0,3)];
      lhss[index4(lhsoffst2,lhsoffst1,1,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,1,0)];
      lhss[index4(lhsoffst2,lhsoffst1,2,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,0)];
      lhss[index4(lhsoffst2,lhsoffst1,3,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,0)];
      lhss[index4(lhsoffst2,lhsoffst1,4,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,0)];
      c[index4(coffst2,coffst1,0,3)] -= coeff * c[index4(coffst2,coffst1,0,0)];
      c[index4(coffst2,coffst1,1,3)] -= coeff * c[index4(coffst2,coffst1,1,0)];
      c[index4(coffst2,coffst1,2,3)] -= coeff * c[index4(coffst2,coffst1,2,0)];
      c[index4(coffst2,coffst1,3,3)] -= coeff * c[index4(coffst2,coffst1,3,0)];
      c[index4(coffst2,coffst1,4,3)] -= coeff * c[index4(coffst2,coffst1,4,0)];
      r[index2(roffst3,roffst2,roffst1,3)] -= coeff * r[index2(roffst3,roffst2,roffst1,0)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,0,4)];
      lhss[index4(lhsoffst2,lhsoffst1,1,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,1,0)];
      lhss[index4(lhsoffst2,lhsoffst1,2,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,0)];
      lhss[index4(lhsoffst2,lhsoffst1,3,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,0)];
      lhss[index4(lhsoffst2,lhsoffst1,4,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,0)];
      c[index4(coffst2,coffst1,0,4)] -= coeff * c[index4(coffst2,coffst1,0,0)];
      c[index4(coffst2,coffst1,1,4)] -= coeff * c[index4(coffst2,coffst1,1,0)];
      c[index4(coffst2,coffst1,2,4)] -= coeff * c[index4(coffst2,coffst1,2,0)];
      c[index4(coffst2,coffst1,3,4)] -= coeff * c[index4(coffst2,coffst1,3,0)];
      c[index4(coffst2,coffst1,4,4)] -= coeff * c[index4(coffst2,coffst1,4,0)];
      r[index2(roffst3,roffst2,roffst1,4)] -= coeff * r[index2(roffst3,roffst2,roffst1,0)];
		
		
      pivot = 1.0 / lhss[index4(lhsoffst2,lhsoffst1,1,1)];
      lhss[index4(lhsoffst2,lhsoffst1,2,1)] *= pivot;
      lhss[index4(lhsoffst2,lhsoffst1,3,1)] *= pivot;
      lhss[index4(lhsoffst2,lhsoffst1,4,1)] *= pivot;
      c[index4(coffst2,coffst1,0,1)] *= pivot;
      c[index4(coffst2,coffst1,1,1)] *= pivot;
      c[index4(coffst2,coffst1,2,1)] *= pivot;
      c[index4(coffst2,coffst1,3,1)] *= pivot;
      c[index4(coffst2,coffst1,4,1)] *= pivot;
      r[index2(roffst3,roffst2,roffst1,1)] *= pivot;

      coeff = lhss[index4(lhsoffst2,lhsoffst1,1,0)];
      lhss[index4(lhsoffst2,lhsoffst1,2,0)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,1)];
      lhss[index4(lhsoffst2,lhsoffst1,3,0)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,1)];
      lhss[index4(lhsoffst2,lhsoffst1,4,0)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,1)];
      c[index4(coffst2,coffst1,0,0)] -= coeff * c[index4(coffst2,coffst1,0,1)];
      c[index4(coffst2,coffst1,1,0)] -= coeff * c[index4(coffst2,coffst1,1,1)];
      c[index4(coffst2,coffst1,2,0)] -= coeff * c[index4(coffst2,coffst1,2,1)];
      c[index4(coffst2,coffst1,3,0)] -= coeff * c[index4(coffst2,coffst1,3,1)];
      c[index4(coffst2,coffst1,4,0)] -= coeff * c[index4(coffst2,coffst1,4,1)];
      r[index2(roffst3,roffst2,roffst1,0)] -= coeff * r[index2(roffst3,roffst2,roffst1,1)];			

      coeff = lhss[index4(lhsoffst2,lhsoffst1,1,2)];
      lhss[index4(lhsoffst2,lhsoffst1,2,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,1)];
      lhss[index4(lhsoffst2,lhsoffst1,3,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,1)];
      lhss[index4(lhsoffst2,lhsoffst1,4,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,1)];
      c[index4(coffst2,coffst1,0,2)] -= coeff * c[index4(coffst2,coffst1,0,1)];
      c[index4(coffst2,coffst1,1,2)] -= coeff * c[index4(coffst2,coffst1,1,1)];
      c[index4(coffst2,coffst1,2,2)] -= coeff * c[index4(coffst2,coffst1,2,1)];
      c[index4(coffst2,coffst1,3,2)] -= coeff * c[index4(coffst2,coffst1,3,1)];
      c[index4(coffst2,coffst1,4,2)] -= coeff * c[index4(coffst2,coffst1,4,1)];
		r[index2(roffst3,roffst2,roffst1,2)] -= coeff * r[index2(roffst3,roffst2,roffst1,1)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,1,3)];
      lhss[index4(lhsoffst2,lhsoffst1,2,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,1)];
      lhss[index4(lhsoffst2,lhsoffst1,3,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,1)];
      lhss[index4(lhsoffst2,lhsoffst1,4,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,1)];
      c[index4(coffst2,coffst1,0,3)] -= coeff * c[index4(coffst2,coffst1,0,1)];
      c[index4(coffst2,coffst1,1,3)] -= coeff * c[index4(coffst2,coffst1,1,1)];
      c[index4(coffst2,coffst1,2,3)] -= coeff * c[index4(coffst2,coffst1,2,1)];
      c[index4(coffst2,coffst1,3,3)] -= coeff * c[index4(coffst2,coffst1,3,1)];
      c[index4(coffst2,coffst1,4,3)] -= coeff * c[index4(coffst2,coffst1,4,1)];
      r[index2(roffst3,roffst2,roffst1,3)] -= coeff * r[index2(roffst3,roffst2,roffst1,1)];
		
      coeff = lhss[index4(lhsoffst2,lhsoffst1,1,4)];
      lhss[index4(lhsoffst2,lhsoffst1,2,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,1)];
      lhss[index4(lhsoffst2,lhsoffst1,3,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,1)];
      lhss[index4(lhsoffst2,lhsoffst1,4,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,1)];
      c[index4(coffst2,coffst1,0,4)] -= coeff * c[index4(coffst2,coffst1,0,1)];
      c[index4(coffst2,coffst1,1,4)] -= coeff * c[index4(coffst2,coffst1,1,1)];
      c[index4(coffst2,coffst1,2,4)] -= coeff * c[index4(coffst2,coffst1,2,1)];
      c[index4(coffst2,coffst1,3,4)] -= coeff * c[index4(coffst2,coffst1,3,1)];
		c[index4(coffst2,coffst1,4,4)] -= coeff * c[index4(coffst2,coffst1,4,1)];
      r[index2(roffst3,roffst2,roffst1,4)] -= coeff * r[index2(roffst3,roffst2,roffst1,1)];

      pivot = 1.0 / lhss[index4(lhsoffst2,lhsoffst1,2,2)];
      lhss[index4(lhsoffst2,lhsoffst1,3,2)] *= pivot;
      lhss[index4(lhsoffst2,lhsoffst1,4,2)] *= pivot;
      c[index4(coffst2,coffst1,0,2)] *= pivot;
      c[index4(coffst2,coffst1,1,2)] *= pivot;
      c[index4(coffst2,coffst1,2,2)] *= pivot;
      c[index4(coffst2,coffst1,3,2)] *= pivot;
      c[index4(coffst2,coffst1,4,2)] *= pivot;
      r[index2(roffst3,roffst2,roffst1,2)] *= pivot;
      coeff = lhss[index4(lhsoffst2,lhsoffst1,2,0)];
      lhss[index4(lhsoffst2,lhsoffst1,3,0)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,2)];
      lhss[index4(lhsoffst2,lhsoffst1,4,0)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,2)];
      c[index4(coffst2,coffst1,0,0)] -= coeff * c[index4(coffst2,coffst1,0,2)];
      c[index4(coffst2,coffst1,1,0)] -= coeff * c[index4(coffst2,coffst1,1,2)];
      c[index4(coffst2,coffst1,2,0)] -= coeff * c[index4(coffst2,coffst1,2,2)];
      c[index4(coffst2,coffst1,3,0)] -= coeff * c[index4(coffst2,coffst1,3,2)];
      c[index4(coffst2,coffst1,4,0)] -= coeff * c[index4(coffst2,coffst1,4,2)];
      r[index2(roffst3,roffst2,roffst1,0)] -= coeff * r[index2(roffst3,roffst2,roffst1,2)];
      coeff = lhss[index4(lhsoffst2,lhsoffst1,2,1)];
      lhss[index4(lhsoffst2,lhsoffst1,3,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,2)];
      lhss[index4(lhsoffst2,lhsoffst1,4,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,2)];
      c[index4(coffst2,coffst1,0,1)] -= coeff * c[index4(coffst2,coffst1,0,2)];
      c[index4(coffst2,coffst1,1,1)] -= coeff * c[index4(coffst2,coffst1,1,2)];
      c[index4(coffst2,coffst1,2,1)] -= coeff * c[index4(coffst2,coffst1,2,2)];
      c[index4(coffst2,coffst1,3,1)] -= coeff * c[index4(coffst2,coffst1,3,2)];
      c[index4(coffst2,coffst1,4,1)] -= coeff * c[index4(coffst2,coffst1,4,2)];
      r[index2(roffst3,roffst2,roffst1,1)] -= coeff * r[index2(roffst3,roffst2,roffst1,2)];
      coeff = lhss[index4(lhsoffst2,lhsoffst1,2,3)];
      lhss[index4(lhsoffst2,lhsoffst1,3,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,2)];
      lhss[index4(lhsoffst2,lhsoffst1,4,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,2)];
      c[index4(coffst2,coffst1,0,3)] -= coeff * c[index4(coffst2,coffst1,0,2)];
      c[index4(coffst2,coffst1,1,3)] -= coeff * c[index4(coffst2,coffst1,1,2)];
      c[index4(coffst2,coffst1,2,3)] -= coeff * c[index4(coffst2,coffst1,2,2)];
      c[index4(coffst2,coffst1,3,3)] -= coeff * c[index4(coffst2,coffst1,3,2)];
      c[index4(coffst2,coffst1,4,3)] -= coeff * c[index4(coffst2,coffst1,4,2)];
      r[index2(roffst3,roffst2,roffst1,3)] -= coeff * r[index2(roffst3,roffst2,roffst1,2)];
      coeff = lhss[index4(lhsoffst2,lhsoffst1,2,4)];
      lhss[index4(lhsoffst2,lhsoffst1,3,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,2)];
      lhss[index4(lhsoffst2,lhsoffst1,4,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,2)];
      c[index4(coffst2,coffst1,0,4)] -= coeff * c[index4(coffst2,coffst1,0,2)];
      c[index4(coffst2,coffst1,1,4)] -= coeff * c[index4(coffst2,coffst1,1,2)];
      c[index4(coffst2,coffst1,2,4)] -= coeff * c[index4(coffst2,coffst1,2,2)];
      c[index4(coffst2,coffst1,3,4)] -= coeff * c[index4(coffst2,coffst1,3,2)];
      c[index4(coffst2,coffst1,4,4)] -= coeff * c[index4(coffst2,coffst1,4,2)];
      r[index2(roffst3,roffst2,roffst1,4)] -= coeff * r[index2(roffst3,roffst2,roffst1,2)];


      pivot = 1.0 / lhss[index4(lhsoffst2,lhsoffst1,3,3)];
      lhss[index4(lhsoffst2,lhsoffst1,4,3)] *= pivot;
      c[index4(coffst2,coffst1,0,3)] *= pivot;
      c[index4(coffst2,coffst1,1,3)] *= pivot;
      c[index4(coffst2,coffst1,2,3)] *= pivot;
      c[index4(coffst2,coffst1,3,3)] *= pivot;
      c[index4(coffst2,coffst1,4,3)] *= pivot;
      r[index2(roffst3,roffst2,roffst1,3)] *= pivot;

      coeff = lhss[index4(lhsoffst2,lhsoffst1,3,0)];
      lhss[index4(lhsoffst2,lhsoffst1,4,0)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,3)];
      c[index4(coffst2,coffst1,0,0)] -= coeff * c[index4(coffst2,coffst1,0,3)];
      c[index4(coffst2,coffst1,1,0)] -= coeff * c[index4(coffst2,coffst1,1,3)];
      c[index4(coffst2,coffst1,2,0)] -= coeff * c[index4(coffst2,coffst1,2,3)];
      c[index4(coffst2,coffst1,3,0)] -= coeff * c[index4(coffst2,coffst1,3,3)];
      c[index4(coffst2,coffst1,4,0)] -= coeff * c[index4(coffst2,coffst1,4,3)];
      r[index2(roffst3,roffst2,roffst1,0)] -= coeff * r[index2(roffst3,roffst2,roffst1,3)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,3,1)];
      lhss[index4(lhsoffst2,lhsoffst1,4,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,3)];
      c[index4(coffst2,coffst1,0,1)] -= coeff * c[index4(coffst2,coffst1,0,3)];
      c[index4(coffst2,coffst1,1,1)] -= coeff * c[index4(coffst2,coffst1,1,3)];
      c[index4(coffst2,coffst1,2,1)] -= coeff * c[index4(coffst2,coffst1,2,3)];
      c[index4(coffst2,coffst1,3,1)] -= coeff * c[index4(coffst2,coffst1,3,3)];
      c[index4(coffst2,coffst1,4,1)] -= coeff * c[index4(coffst2,coffst1,4,3)];
      r[index2(roffst3,roffst2,roffst1,1)] -= coeff * r[index2(roffst3,roffst2,roffst1,3)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,3,2)];
      lhss[index4(lhsoffst2,lhsoffst1,4,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,3)];
      c[index4(coffst2,coffst1,0,2)] -= coeff * c[index4(coffst2,coffst1,0,3)];
      c[index4(coffst2,coffst1,1,2)] -= coeff * c[index4(coffst2,coffst1,1,3)];
      c[index4(coffst2,coffst1,2,2)] -= coeff * c[index4(coffst2,coffst1,2,3)];
      c[index4(coffst2,coffst1,3,2)] -= coeff * c[index4(coffst2,coffst1,3,3)];
      c[index4(coffst2,coffst1,4,2)] -= coeff * c[index4(coffst2,coffst1,4,3)];
      r[index2(roffst3,roffst2,roffst1,2)] -= coeff * r[index2(roffst3,roffst2,roffst1,3)];
      coeff = lhss[index4(lhsoffst2,lhsoffst1,3,4)];
		lhss[index4(lhsoffst2,lhsoffst1,4,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,3)];
      c[index4(coffst2,coffst1,0,4)] -= coeff * c[index4(coffst2,coffst1,0,3)];
      c[index4(coffst2,coffst1,1,4)] -= coeff * c[index4(coffst2,coffst1,1,3)];
      c[index4(coffst2,coffst1,2,4)] -= coeff * c[index4(coffst2,coffst1,2,3)];
      c[index4(coffst2,coffst1,3,4)] -= coeff * c[index4(coffst2,coffst1,3,3)];
      c[index4(coffst2,coffst1,4,4)] -= coeff * c[index4(coffst2,coffst1,4,3)];
      r[index2(roffst3,roffst2,roffst1,4)] -= coeff * r[index2(roffst3,roffst2,roffst1,3)];

      pivot = 1.0 / lhss[index4(lhsoffst2,lhsoffst1,4,4)];
      c[index4(coffst2,coffst1,0,4)] *= pivot;
      c[index4(coffst2,coffst1,1,4)] *= pivot;
      c[index4(coffst2,coffst1,2,4)] *= pivot;
      c[index4(coffst2,coffst1,3,4)] *= pivot;
      c[index4(coffst2,coffst1,4,4)] *= pivot;
		r[index2(roffst3,roffst2,roffst1,4)] *= pivot;

      coeff = lhss[index4(lhsoffst2,lhsoffst1,4,0)];
      c[index4(coffst2,coffst1,0,0)] -= coeff * c[index4(coffst2,coffst1,0,4)];
      c[index4(coffst2,coffst1,1,0)] -= coeff * c[index4(coffst2,coffst1,1,4)];
      c[index4(coffst2,coffst1,2,0)] -= coeff * c[index4(coffst2,coffst1,2,4)];
      c[index4(coffst2,coffst1,3,0)] -= coeff * c[index4(coffst2,coffst1,3,4)];
      c[index4(coffst2,coffst1,4,0)] -= coeff * c[index4(coffst2,coffst1,4,4)];
		r[index2(roffst3,roffst2,roffst1,0)] -= coeff * r[index2(roffst3,roffst2,roffst1,4)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,4,1)];
      c[index4(coffst2,coffst1,0,1)] -= coeff * c[index4(coffst2,coffst1,0,4)];
      c[index4(coffst2,coffst1,1,1)] -= coeff * c[index4(coffst2,coffst1,1,4)];
      c[index4(coffst2,coffst1,2,1)] -= coeff * c[index4(coffst2,coffst1,2,4)];
      c[index4(coffst2,coffst1,3,1)] -= coeff * c[index4(coffst2,coffst1,3,4)];
      c[index4(coffst2,coffst1,4,1)] -= coeff * c[index4(coffst2,coffst1,4,4)];
      r[index2(roffst3,roffst2,roffst1,1)] -= coeff * r[index2(roffst3,roffst2,roffst1,4)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,4,2)];
      c[index4(coffst2,coffst1,0,2)] -= coeff * c[index4(coffst2,coffst1,0,4)];
      c[index4(coffst2,coffst1,1,2)] -= coeff * c[index4(coffst2,coffst1,1,4)];
      c[index4(coffst2,coffst1,2,2)] -= coeff * c[index4(coffst2,coffst1,2,4)];
      c[index4(coffst2,coffst1,3,2)] -= coeff * c[index4(coffst2,coffst1,3,4)];
      c[index4(coffst2,coffst1,4,2)] -= coeff * c[index4(coffst2,coffst1,4,4)];
      r[index2(roffst3,roffst2,roffst1,2)] -= coeff * r[index2(roffst3,roffst2,roffst1,4)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,4,3)];
      c[index4(coffst2,coffst1,0,3)] -= coeff * c[index4(coffst2,coffst1,0,4)];
      c[index4(coffst2,coffst1,1,3)] -= coeff * c[index4(coffst2,coffst1,1,4)];
      c[index4(coffst2,coffst1,2,3)] -= coeff * c[index4(coffst2,coffst1,2,4)];
      c[index4(coffst2,coffst1,3,3)] -= coeff * c[index4(coffst2,coffst1,3,4)];
      c[index4(coffst2,coffst1,4,3)] -= coeff * c[index4(coffst2,coffst1,4,4)];
      r[index2(roffst3,roffst2,roffst1,3)] -= coeff * r[index2(roffst3,roffst2,roffst1,4)];
  }

  public void binvrhs(double[] lhss, int lhsoffst1, int lhsoffst2, double[] r, int roffst1, int roffst2, int roffst3)
  {
      double pivot;
      double coeff;

      pivot = 1 / lhss[index4(lhsoffst2,lhsoffst1,0,0)];
      lhss[index4(lhsoffst2,lhsoffst1,1,0)] *= pivot;
      lhss[index4(lhsoffst2,lhsoffst1,2,0)] *= pivot;
      lhss[index4(lhsoffst2,lhsoffst1,3,0)] *= pivot;
      lhss[index4(lhsoffst2,lhsoffst1,4,0)] *= pivot;
      r[index2(roffst3,roffst2,roffst1,0)] *= pivot;

      coeff = lhss[index4(lhsoffst2,lhsoffst1,0,1)];
      lhss[index4(lhsoffst2,lhsoffst1,1,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,1,0)];
      lhss[index4(lhsoffst2,lhsoffst1,2,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,0)];
      lhss[index4(lhsoffst2,lhsoffst1,3,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,0)];
      lhss[index4(lhsoffst2,lhsoffst1,4,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,0)];
      r[index2(roffst3,roffst2,roffst1,1)] -= coeff * r[index2(roffst3,roffst2,roffst1,0)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,0,2)];
      lhss[index4(lhsoffst2,lhsoffst1,1,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,1,0)];
      lhss[index4(lhsoffst2,lhsoffst1,2,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,0)];
      lhss[index4(lhsoffst2,lhsoffst1,3,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,0)];
      lhss[index4(lhsoffst2,lhsoffst1,4,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,0)];
      r[index2(roffst3,roffst2,roffst1,2)] -= coeff * r[index2(roffst3,roffst2,roffst1,0)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,0,3)];
      lhss[index4(lhsoffst2,lhsoffst1,1,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,1,0)];
      lhss[index4(lhsoffst2,lhsoffst1,2,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,0)];
      lhss[index4(lhsoffst2,lhsoffst1,3,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,0)];
      lhss[index4(lhsoffst2,lhsoffst1,4,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,0)];
      r[index2(roffst3,roffst2,roffst1,3)] -= coeff * r[index2(roffst3,roffst2,roffst1,0)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,0,4)];
      lhss[index4(lhsoffst2,lhsoffst1,1,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,1,0)];
      lhss[index4(lhsoffst2,lhsoffst1,2,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,0)];
      lhss[index4(lhsoffst2,lhsoffst1,3,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,0)];
      lhss[index4(lhsoffst2,lhsoffst1,4,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,0)];
      r[index2(roffst3,roffst2,roffst1,4)] -= coeff * r[index2(roffst3,roffst2,roffst1,0)];
		

      pivot = 1 / lhss[index4(lhsoffst2,lhsoffst1,1,1)];
      lhss[index4(lhsoffst2,lhsoffst1,2,1)] *= pivot;
      lhss[index4(lhsoffst2,lhsoffst1,3,1)] *= pivot;
      lhss[index4(lhsoffst2,lhsoffst1,4,1)] *= pivot;
      r[index2(roffst3,roffst2,roffst1,1)] *= pivot;

      coeff = lhss[index4(lhsoffst2,lhsoffst1,1,0)];
      lhss[index4(lhsoffst2,lhsoffst1,2,0)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,1)];
      lhss[index4(lhsoffst2,lhsoffst1,3,0)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,1)];
      lhss[index4(lhsoffst2,lhsoffst1,4,0)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,1)];
      r[index2(roffst3,roffst2,roffst1,0)] -= coeff * r[index2(roffst3,roffst2,roffst1,1)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,1,2)];
      lhss[index4(lhsoffst2,lhsoffst1,2,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,1)];
      lhss[index4(lhsoffst2,lhsoffst1,3,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,1)];
      lhss[index4(lhsoffst2,lhsoffst1,4,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,1)];
      r[index2(roffst3,roffst2,roffst1,2)] -= coeff * r[index2(roffst3,roffst2,roffst1,1)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,1,3)];
      lhss[index4(lhsoffst2,lhsoffst1,2,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,1)];
      lhss[index4(lhsoffst2,lhsoffst1,3,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,1)];
      lhss[index4(lhsoffst2,lhsoffst1,4,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,1)];
      r[index2(roffst3,roffst2,roffst1,3)] -= coeff * r[index2(roffst3,roffst2,roffst1,1)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,1,4)];
      lhss[index4(lhsoffst2,lhsoffst1,2,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,2,1)];
      lhss[index4(lhsoffst2,lhsoffst1,3,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,1)];
      lhss[index4(lhsoffst2,lhsoffst1,4,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,1)];
      r[index2(roffst3,roffst2,roffst1,4)] -= coeff * r[index2(roffst3,roffst2,roffst1,1)];
		

      pivot = 1 / lhss[index4(lhsoffst2,lhsoffst1,2,2)];
      lhss[index4(lhsoffst2,lhsoffst1,3,2)] *= pivot;
      lhss[index4(lhsoffst2,lhsoffst1,4,2)] *= pivot;
      r[index2(roffst3,roffst2,roffst1,2)] *= pivot;

      coeff = lhss[index4(lhsoffst2,lhsoffst1,2,0)];
      lhss[index4(lhsoffst2,lhsoffst1,3,0)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,2)];
      lhss[index4(lhsoffst2,lhsoffst1,4,0)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,2)];
      r[index2(roffst3,roffst2,roffst1,0)] -= coeff * r[index2(roffst3,roffst2,roffst1,2)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,2,1)];
      lhss[index4(lhsoffst2,lhsoffst1,3,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,2)];
      lhss[index4(lhsoffst2,lhsoffst1,4,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,2)];
      r[index2(roffst3,roffst2,roffst1,1)] -= coeff * r[index2(roffst3,roffst2,roffst1,2)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,2,3)];
      lhss[index4(lhsoffst2,lhsoffst1,3,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,2)];
      lhss[index4(lhsoffst2,lhsoffst1,4,3)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,2)];
      r[index2(roffst3,roffst2,roffst1,3)] -= coeff * r[index2(roffst3,roffst2,roffst1,2)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,2,4)];
      lhss[index4(lhsoffst2,lhsoffst1,3,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,3,2)];
      lhss[index4(lhsoffst2,lhsoffst1,4,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,2)];
      r[index2(roffst3,roffst2,roffst1,4)] -= coeff * r[index2(roffst3,roffst2,roffst1,2)];
		

      pivot = 1 / lhss[index4(lhsoffst2,lhsoffst1,3,3)];
      lhss[index4(lhsoffst2,lhsoffst1,4,3)] *= pivot;
      r[index2(roffst3,roffst2,roffst1,3)] *= pivot;

      coeff = lhss[index4(lhsoffst2,lhsoffst1,3,0)];
      lhss[index4(lhsoffst2,lhsoffst1,4,0)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,3)];
      r[index2(roffst3,roffst2,roffst1,0)] -= coeff * r[index2(roffst3,roffst2,roffst1,3)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,3,1)];
      lhss[index4(lhsoffst2,lhsoffst1,4,1)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,3)];
      r[index2(roffst3,roffst2,roffst1,1)] -= coeff * r[index2(roffst3,roffst2,roffst1,3)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,3,2)];
      lhss[index4(lhsoffst2,lhsoffst1,4,2)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,3)];
      r[index2(roffst3,roffst2,roffst1,2)] -= coeff * r[index2(roffst3,roffst2,roffst1,3)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,3,4)];
      lhss[index4(lhsoffst2,lhsoffst1,4,4)] -= coeff * lhss[index4(lhsoffst2,lhsoffst1,4,3)];
      r[index2(roffst3,roffst2,roffst1,4)] -= coeff * r[index2(roffst3,roffst2,roffst1,3)];


      pivot = 1 / lhss[index4(lhsoffst2,lhsoffst1,4,4)];
      r[index2(roffst3,roffst2,roffst1,4)] *= pivot;

      coeff = lhss[index4(lhsoffst2,lhsoffst1,4,0)];
      r[index2(roffst3,roffst2,roffst1,0)] -= coeff * r[index2(roffst3,roffst2,roffst1,4)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,4,1)];
      r[index2(roffst3,roffst2,roffst1,1)] -= coeff * r[index2(roffst3,roffst2,roffst1,4)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,4,2)];
      r[index2(roffst3,roffst2,roffst1,2)] -= coeff * r[index2(roffst3,roffst2,roffst1,4)];

      coeff = lhss[index4(lhsoffst2,lhsoffst1,4,3)];
      r[index2(roffst3,roffst2,roffst1,3)] -= coeff * r[index2(roffst3,roffst2,roffst1,4)];
  }
}
