/*
!-------------------------------------------------------------------------!
!									  !
!	 N  A  S     P A R A L L E L	 B E N C H M A R K S  3.0	  !
!									  !
!			J A V A 	V E R S I O N			  !
!									  !
!                                  F T                                    !
!                                                                         !
!-------------------------------------------------------------------------!
!                                                                         !
!    This benchmark is a serial/multithreaded version of the              !
!    NPB3_0_JAV FT code.                                                  !
!									  !
!    Permission to use, copy, distribute and modify this software	  !
!    for any purpose with or without fee is hereby granted.  We 	  !
!    request, however, that all derived work reference the NAS  	  !
!    Parallel Benchmarks 3.0. This software is provided "as is" 	  !
!    without express or implied warranty.				  !
!									  !
!    Information on NPB 3.0, including the Technical Report NAS-02-008	  !
!    "Implementation of the NAS Parallel Benchmarks in Java",		  !
!    original specifications, source code, results and information	  !
!    on how to submit new results, is available at:			  !
!									  !
!	    http://www.nas.nasa.gov/Software/NPB/			  !
!									  !
!    Send comments or suggestions to  npb@nas.nasa.gov  		  !
!									  !
!	   NAS Parallel Benchmarks Group				  !
!	   NASA Ames Research Center					  !
!	   Mail Stop: T27A-1						  !
!	   Moffett Field, CA   94035-1000				  !
!									  !
!	   E-mail:  npb@nas.nasa.gov					  !
!	   Fax:     (650) 604-3957					  !
!									  !
!-------------------------------------------------------------------------!
! Authors: D. Bailey 					                  !
!	   W. Saphir							  !
! Translation to Java and MultiThreaded Code	 			  !
!	   M. Frumkin							  !
!	   M. Schultz							  !
!-------------------------------------------------------------------------!
*/

package NPB3_0_JAV;
import NPB3_0_JAV.FTThreads.*;
import NPB3_0_JAV.BMInOut.*;
import java.text.*;
import java.io.*;

public class FT extends FTBase{
  public int bid=-1;
  public BMResults results;
  boolean done=false;
  public FT(char clss, int np , boolean ser){
    super(clss,np,ser);
  }
  public static void main(String argv[]){
    FT ft = null;
    
    BMArgs.ParseCmdLineArgs(argv,BMName);
    char CLSS=BMArgs.CLASS;
    int np=BMArgs.num_threads;
    boolean serial=BMArgs.serial;

    try{ 
      ft = new FT(CLSS,np,serial);
    }catch(OutOfMemoryError e){
      BMArgs.outOfMemoryMessage();
      System.exit(0);
    }      
    ft.runBenchMark();
  }  
  
  public void runBenchMark()
  {
    BMArgs.Banner(BMName,CLASS,true,num_threads);
    System.out.println( " Size = " + nx+" X " + ny+" X " + nz
                       +" niter = "+niter_default);
    setTimers();		       
    timer.resetAllTimers();
    
    appft_serial();

    if(timeron) timer.start(14);		  
    int verified=verify(4, nx, ny, nz, niter_default, checksum);
    if(timeron) timer.stop(14);	 
    timer.stop(1);
    			     
    double time=timer.readTimer(1);			
    results=new BMResults(BMName,
    			  CLASS,
    			  nx,
    			  ny,
    			  nz,
    			  niter_default,
    			  time,
    			  getMFLOPS(time,nx,ny,nz),
    			  "floating point",
    			  verified,
    			  true,
    			  num_threads,
    			  bid);
    results.print();				
    if(timeron) printTimers();		       
    done = true;
  }
  
  public void appft_serial(){
    if(timeron) timer.start(2);	    
    initial_conditions(xtr,ny,nx,nz); 
    CompExp( nx, exp1 );
    CompExp( ny, exp2 );
    CompExp( nz, exp3 ) ;     
    fftXYZ(1, xtr, exp2, exp1, exp3,ny,nx,nz);
    if(timeron) timer.stop(2);		 

    timer.start(1);
    if(timeron) timer.start(12);
    initial_conditions(xtr,ny,nx,nz);
    if(timeron) timer.stop(12);
    if(timeron) timer.start(15);
    fftXYZ(1,xtr,exp2,exp1,exp3,ny,nx,nz);
    if(timeron) timer.stop(15);
    
    double ap =  (- 4.0 * alpha * Math.pow(pi,2) );
    int n12 = nx/2;
    int n22 = ny/2;
    int n32 = nz/2;
    
    for(int it=0;it<niter_default;it++){
      if(timeron) timer.start(11);

      for(int i=0;i<nx;i++){
    	int ii = i-((i)/n12)*nx;
    	int ii2 = ii*ii;
    	for(int k=0;k<nz;k++){
    	  int kk = k-((k)/n32)*nz;
    	  int ik2 = ii2 + kk*kk;
    	  for(int j=0;j<ny;j++){
    	    int jj = j-((j)/n22)*ny;
            xnt[index4(i,k,j,REAL)] = xtr[index3(k,i,j,REAL)] * Math.exp((ap*(jj*jj+ik2))*(it+1));
            xnt[index4(i,k,j,IMAG)] = xtr[index3(k,i,j,IMAG)] * Math.exp((ap*(jj*jj+ik2))*(it+1));
    	  }
    	}
      }
      if(timeron) timer.stop(11);	   

      if(timeron) timer.start(15);      
      fftXYZ(-1,xnt,exp2,exp3,exp1,ny,nz,nx);
      if(timeron) timer.stop(15);

      if(timeron) timer.start(10);      
      CalculateChecksum(checksum, REAL+it*isize2, it, xnt, ny, nz, nx);
      if(timeron) timer.stop(10);	   
    } 
  }
  
 
  public void setTimers(){
    File f1 = new File("timer.flag");
    timeron = true;
    if( f1.exists() ) timeron = true;
  }
  public void printTimers(){
    DecimalFormat fmt = new DecimalFormat("0.000");
    System.out.println("  SECTION   Time (secs)");
    System.out.println("FT time =		      "+ fmt.format(timer.readTimer(1)));
    System.out.println("WarmUp time =		      "+ fmt.format(timer.readTimer(2)));
    System.out.println("ffXYZ body time =	      "+ fmt.format(timer.readTimer(3)));
    System.out.println("Swarztrauber body time =      "+ fmt.format(timer.readTimer(4)));
    System.out.println("Redistribution time =	      "+ fmt.format(timer.readTimer(5)));
    System.out.println("Transposition time =	      "+ fmt.format(timer.readTimer(6)));
    System.out.println("X time =		      "+ fmt.format(timer.readTimer(7)));
    System.out.println("Y time =		      "+ fmt.format(timer.readTimer(8)));
    System.out.println("Z time =		      "+ fmt.format(timer.readTimer(9)));
    System.out.println("CalculateChecksum =	      "+ fmt.format(timer.readTimer(10)));
    System.out.println("evolve =		      "+ fmt.format(timer.readTimer(11)));
    System.out.println("compute_initial_conditions =  "+ fmt.format(timer.readTimer(12)));
    System.out.println("twiddle =		      "+ fmt.format(timer.readTimer(13)));
    System.out.println("verify =		      "+ fmt.format(timer.readTimer(14)));
    System.out.println("fftXYZ =		      "+ fmt.format(timer.readTimer(15)));
  }
  
  public double getMFLOPS(double total_time,int nx,int ny,int nz){
    double mflops = 0.0;
    int ntotal = nx*ny*nz;
    if( total_time > 0 ){
      mflops = 14.8157+7.19641*Math.log(ntotal)
    	      +(5.23518+7.21113*Math.log(ntotal))*niter_default;
      mflops *= ntotal/(total_time*1000000.0);
    }
    return mflops;
  }
  
  private int index_u(int ii, int ki, int ji, int part, int d1, int d2)
  {
  	int isize3 = 2,
          jsize3 = isize3 * (d1 + 1),
          ksize3 = jsize3 * d2;
  	return part + ji*isize3 + ki*jsize3 + ii*ksize3;
  }

  public void CalculateChecksum(double csum[], int csmffst,
                                int iterN,double u[],int d1,
				int d2, int d3){  
    int i, ii, ji, ki;
    int isize3=2,
    	jsize3=isize3*(d1+1),
        ksize3=jsize3*d2;
    csum[REAL+csmffst] = 0.0;
    csum[IMAG+csmffst] = 0.0;
    
    double csumr= 0.0,csumi= 0.0;
    for(i=1;i<=1024;i++){
      ii = (1*i)%d3;
      ji = (3*i)%d1;
      ki = (5*i)%d2;
      csumr += u[index_u(ii, ki, ji, REAL, d1, d2)]; // csumr += u[index4(ii, ki, ji, REAL)];
      csumi += u[index_u(ii, ki, ji, IMAG, d1, d2)]; // csumi += u[index4(ii, ki, ji, IMAG)];
    }
    csum[REAL+csmffst] = csumr/(d1*d2*d3);
    csum[IMAG+csmffst] = csumi/(d1*d2*d3);
//  System.out.println("==FT Checksum:"+iterN + " checksum = (" + 
//        	       csum[REAL+csmffst] + "," + csum[IMAG+csmffst] + ")" );	 
  }
   
  
  private int index_plane(int i, int j, int part, int n2)
  {
  	int isize1=2, jsize1=2*(n2+1);
  	//return part+j*2+i*2*(n2+1);
  	return part + j*isize1 + i*jsize1;
  }
  
  private int index_x(int k, int j, int  i, int part, int n1, int n2)
  {
       int isize3 = 2, 
           jsize3 = isize3 * (n1 + 1),
           ksize3 = jsize3 * n2;
  	//return REAL+i*isize3+j*jsize3+k*ksize3;
  	//return part + i*2 + j*(2*(n1+1)) + k*((2*(n1+1))*n2);
  	return part + i*isize3+ j*jsize3 + k*ksize3;
  }

  
  public void fftXYZ(int sign,double x[],double exp1[], double exp2[] ,
		     double exp3[] ,int n1,int n2,int n3){
    int i=0, j=0, k, log;
    int isize3=2,jsize3,ksize3;
        jsize3=isize3*(n1+1);
	ksize3=jsize3*n2;
    int isize1=2,jsize1=2*(n2+1);
	
    if(timeron) timer.start(3); 
           
    log = ilog2( n2 );
    if(timeron) timer.start(7); 
    for(k=0;k<n3;k++) Swarztrauber(sign,log,n1,n2,x,k*ksize3,n1,exp2,scr);
    if(timeron) timer.stop(7); 

    log = ilog2( n1 );
    if(timeron) timer.start(8); 
    for(k=0;k<n3;k++){
      for(j=0;j<n2;j++){
	for(i=0; i<n1;i++){
        plane[index_plane(i, j, REAL, n2)] = x[index_x(k, j, i, REAL,n1,n2)];
        plane[index_plane(i, j, IMAG, n2)] = x[index_x(k, j, i, IMAG,n1,n2)];
	}
      }
      Swarztrauber(sign,log,n2,n1,plane,0,n2,exp1,scr);
      for(j=0;j<n2;j++){
	for(i=0;i<n1;i++){
        x[index_x(k,j,i,REAL,n1,n2)] = plane[index_plane(i,j,REAL,n2)];
        x[index_x(k,j,i,IMAG,n1,n2)] = plane[index_plane(i,j,IMAG,n2)];
	}
      }
    }
    if(timeron) timer.stop(8);

    log = ilog2(n3);
    if(timeron) timer.start(9);
    jsize1=2*(n1+1);
    for(k=0;k<n2;k++) {
      for(i=0; i<n3;i++){
        for(j=0;j<n1;j++){
            plane[index_plane(i,j,REAL,n2)] = x[index_x(i,k,j,REAL,n1,n2)];
            plane[index_plane(i,j,IMAG,n2)] = x[index_x(i,k,j,IMAG,n1,n2)];
	}
      }
      Swarztrauber(sign,log,n1,n3,plane,0,n1,exp3,scr);
      for(i=0; i<n3;i++){
        for(j=0;j<n1;j++){
            x[index_x(i,k,j,REAL,n1,n2)] = plane[index_plane(i,j,REAL,n2)];
            x[index_x(i,k,j,IMAG,n1,n2)] = plane[index_plane(i,j,IMAG,n2)];
	}
      }
    }
    if(timeron) timer.stop(9);
    if(timeron) timer.stop(3);
  }  

  private int index_cexpd(int i, int part)
  {
  	return part+i*2;
  }
  
  public int verify(int ires, int n1, int n2, int n3, int nt, double[] cksum)
  {
      int verified = -1;
      boolean[] temp = new boolean[niter_default];
      double[] cexpd = new double[2*21];
      if ((n1 == 64) && (n2 == 64) && (n3 == 64) && (nt == 6)) {
          //
          // Class S reference values.
          //
          cexpd[index_cexpd(0,REAL)] = 554.6087004964;
          cexpd[index_cexpd(1,REAL)] = 554.6385409189;
          cexpd[index_cexpd(2,REAL)] = 554.6148406171;
          cexpd[index_cexpd(3,REAL)] = 554.5423607415;
          cexpd[index_cexpd(4,REAL)] = 554.4255039624;
          cexpd[index_cexpd(5,REAL)] = 554.2683411902;

          cexpd[index_cexpd(0,IMAG)] = 484.5363331978;
          cexpd[index_cexpd(1,IMAG)] = 486.5304269511;
          cexpd[index_cexpd(2,IMAG)] = 488.3910722336;
          cexpd[index_cexpd(3,IMAG)] = 490.1273169046;
          cexpd[index_cexpd(4,IMAG)] = 491.7475857993;
          cexpd[index_cexpd(5,IMAG)] = 493.2597244941;

      }
      else if ((n1 == 128) && (n2 == 128) && (n3 == 32) && (nt == 6)) {
          //
          // Class W reference values.
          //
          cexpd[index_cexpd(0,REAL)] = 567.3612178944;
          cexpd[index_cexpd(1,REAL)] = 563.1436885271;
          cexpd[index_cexpd(2,REAL)] = 559.4024089970;
          cexpd[index_cexpd(3,REAL)] = 556.0698047020;
          cexpd[index_cexpd(4,REAL)] = 553.0898991250;
          cexpd[index_cexpd(5,REAL)] = 550.4159734538;

          cexpd[index_cexpd(0,IMAG)] = 529.3246849175;
          cexpd[index_cexpd(1,IMAG)] = 528.2149986629;
          cexpd[index_cexpd(2,IMAG)] = 527.0996558037;
          cexpd[index_cexpd(3,IMAG)] = 526.0027904925;
          cexpd[index_cexpd(4,IMAG)] = 524.9400845633;
          cexpd[index_cexpd(5,IMAG)] = 523.9212247086;
          //
      }
      else if ((n1 == 256) && (n2 == 256) && (n3 == 128) && (nt == 6)){
          //
          // Class A reference values.
          //
          cexpd[index_cexpd(0,REAL)] = 504.6735008193;
          cexpd[index_cexpd(1,REAL)] = 505.9412319734;
          cexpd[index_cexpd(2,REAL)] = 506.9376896287;
          cexpd[index_cexpd(3,REAL)] = 507.7892868474;
          cexpd[index_cexpd(4,REAL)] = 508.5233095391;
          cexpd[index_cexpd(5,REAL)] = 509.1487099959;

          cexpd[index_cexpd(0,IMAG)] = 511.4047905510;
          cexpd[index_cexpd(1,IMAG)] = 509.8809666433;
          cexpd[index_cexpd(2,IMAG)] = 509.8144042213;
          cexpd[index_cexpd(3,IMAG)] = 510.1336130759;
          cexpd[index_cexpd(4,IMAG)] = 510.4914655194;
          cexpd[index_cexpd(5,IMAG)] = 510.7917842803;
          //
      }
      else if ((n1 == 512) && (n2 == 256) && (n3 == 256) && (nt == 20)){
          //
          // Class B reference values.
          //
          cexpd[index_cexpd(0,REAL)] = 517.7643571579;
          cexpd[index_cexpd(1,REAL)] = 515.4521291263;
          cexpd[index_cexpd(2,REAL)] = 514.6409228649;
          cexpd[index_cexpd(3,REAL)] = 514.2378756213;
          cexpd[index_cexpd(4,REAL)] = 513.9626667737;
          cexpd[index_cexpd(5,REAL)] = 513.7423460082;
          cexpd[index_cexpd(6,REAL)] = 513.5547056878;
          cexpd[index_cexpd(7,REAL)] = 513.3910925466;
          cexpd[index_cexpd(8,REAL)] = 513.2470705390;
          cexpd[index_cexpd(9,REAL)] = 513.1197729984;
          cexpd[index_cexpd(10,REAL)] = 513.0070319283;
          cexpd[index_cexpd(11,REAL)] = 512.9070537032;
          cexpd[index_cexpd(12,REAL)] = 512.8182883502;
          cexpd[index_cexpd(13,REAL)] = 512.7393733383;
          cexpd[index_cexpd(14,REAL)] = 512.6691062020;
          cexpd[index_cexpd(15,REAL)] = 512.6064276004;
          cexpd[index_cexpd(16,REAL)] = 512.5504076570;
          cexpd[index_cexpd(17,REAL)] = 512.5002331720;
          cexpd[index_cexpd(18,REAL)] = 512.4551951846;
          cexpd[index_cexpd(19,REAL)] = 512.4146770029;

          cexpd[index_cexpd(0,IMAG)] = 507.7803458597;
          cexpd[index_cexpd(1,IMAG)] = 508.8249431599;
          cexpd[index_cexpd(2,IMAG)] = 509.6208912659;
          cexpd[index_cexpd(3,IMAG)] = 510.1023387619;
          cexpd[index_cexpd(4,IMAG)] = 510.3976610617;
          cexpd[index_cexpd(5,IMAG)] = 510.5948019802;
          cexpd[index_cexpd(6,IMAG)] = 510.7404165783;
          cexpd[index_cexpd(7,IMAG)] = 510.8576573661;
          cexpd[index_cexpd(8,IMAG)] = 510.9577278523;
          cexpd[index_cexpd(9,IMAG)] = 511.0460304483;
          cexpd[index_cexpd(10,IMAG)] = 511.1252433800;
          cexpd[index_cexpd(11,IMAG)] = 511.1968077718;
          cexpd[index_cexpd(12,IMAG)] = 511.2616233064;
          cexpd[index_cexpd(13,IMAG)] = 511.3203605551;
          cexpd[index_cexpd(14,IMAG)] = 511.3735928093;
          cexpd[index_cexpd(15,IMAG)] = 511.4218460548;
          cexpd[index_cexpd(16,IMAG)] = 511.4656139760;
          cexpd[index_cexpd(17,IMAG)] = 511.5053595966;
          cexpd[index_cexpd(18,IMAG)] = 511.5415130407;
          cexpd[index_cexpd(19,IMAG)] = 511.5744692211;
          //
      }
      else if ((n1 == 512) && (n2 == 512) &&
               (n3 == 512) && (nt == 20))
      {
          //
          // Class C reference values.
          //
          cexpd[index_cexpd(0,REAL)] = 519.5078707457;
          cexpd[index_cexpd(1,REAL)] = 515.5422171134;
          cexpd[index_cexpd(2,REAL)] = 514.4678022222;
          cexpd[index_cexpd(3,REAL)] = 514.0150594328;
          cexpd[index_cexpd(4,REAL)] = 513.7550426810;
          cexpd[index_cexpd(5,REAL)] = 513.5811056728;
          cexpd[index_cexpd(6,REAL)] = 513.4569343165;
          cexpd[index_cexpd(7,REAL)] = 513.3651975661;
          cexpd[index_cexpd(8,REAL)] = 513.2955192805;
          cexpd[index_cexpd(9,REAL)] = 513.2410471738;
          cexpd[index_cexpd(10,REAL)] = 513.1971141679;
          cexpd[index_cexpd(11,REAL)] = 513.1605205716;
          cexpd[index_cexpd(12,REAL)] = 513.1290734194;
          cexpd[index_cexpd(13,REAL)] = 513.1012720314;
          cexpd[index_cexpd(14,REAL)] = 513.0760908195;
          cexpd[index_cexpd(15,REAL)] = 513.0528295923;
          cexpd[index_cexpd(16,REAL)] = 513.0310107773;
          cexpd[index_cexpd(17,REAL)] = 513.0103090133;
          cexpd[index_cexpd(18,REAL)] = 512.9905029333;
          cexpd[index_cexpd(19,REAL)] = 512.9714421109;

          cexpd[index_cexpd(0,IMAG)] = 514.9019699238;
          cexpd[index_cexpd(1,IMAG)] = 512.7578201997;
          cexpd[index_cexpd(2,IMAG)] = 512.2251847514;
          cexpd[index_cexpd(3,IMAG)] = 512.1090289018;
          cexpd[index_cexpd(4,IMAG)] = 512.1143685824;
          cexpd[index_cexpd(5,IMAG)] = 512.1496764568;
          cexpd[index_cexpd(6,IMAG)]= 512.1870921893;
          cexpd[index_cexpd(7,IMAG)] = 512.2193250322;
          cexpd[index_cexpd(8,IMAG)] = 512.2454735794;
          cexpd[index_cexpd(9,IMAG)] = 512.2663649603;
          cexpd[index_cexpd(10,IMAG)] = 512.2830879827;
          cexpd[index_cexpd(11,IMAG)] = 512.2965869718;
          cexpd[index_cexpd(12,IMAG)] = 512.3075927445;
          cexpd[index_cexpd(13,IMAG)] = 512.3166486553;
          cexpd[index_cexpd(14,IMAG)] = 512.3241541685;
          cexpd[index_cexpd(15,IMAG)] = 512.3304037599;
          cexpd[index_cexpd(16,IMAG)] = 512.3356167976;
          cexpd[index_cexpd(17,IMAG)] = 512.3399592211;
          cexpd[index_cexpd(18,IMAG)] = 512.3435588985;
          cexpd[index_cexpd(19,IMAG)] = 512.3465164008;
      }
      double epsilon = 1.0E-12;
      //
      // Verification test for results.
      //
      if (nt <= 0)
      {

      }
      else
      {
          for (int it = 0; it < nt; it++)
          {
          	 double csumr=(cksum[REAL + it*2]-cexpd[REAL +it*2])/cexpd[REAL +it*2];
           	 double csumi=(cksum[IMAG + it*2]-cexpd[IMAG +it*2])/cexpd[IMAG +it*2];
              if (Math.abs(csumr) <= epsilon
               || Math.abs(csumi) <= epsilon
             )
              {
                  if (verified == -1) verified = 1;
              }
              else
              {
                  verified = 0;
              }
          }
      }
      BMResults.printVerificationStatus(CLASS, verified, BMName);
      return verified;
  }
  
  public double getTime(){return timer.readTimer(1);}
  public boolean isDone(){return done;}  
  public void finalize() throws Throwable{
    System.out.println("FT: is about to be garbage collected"); 
    super.finalize();
  }
}


